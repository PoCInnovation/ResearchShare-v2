{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  function query(_x) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dht/query', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: peerId.toString()\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 10:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 14;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 14:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 24;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.responses = (message.responses || []).map(function (\n              /** @type {{ ID: string, Addrs: string[] }} */\n              _ref) {\n                var ID = _ref.ID,\n                    Addrs = _ref.Addrs;\n                return {\n                  id: ID,\n                  addrs: (Addrs || []).map(function (\n                  /** @type {string} **/\n                  a) {\n                    return new Multiaddr(a);\n                  })\n                };\n              });\n              _context.next = 21;\n              return message;\n\n            case 21:\n              _iteratorNormalCompletion = true;\n              _context.next = 8;\n              break;\n\n            case 24:\n              _context.next = 30;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 30:\n              _context.prev = 30;\n              _context.prev = 31;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.next = 35;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 35:\n              _context.prev = 35;\n\n              if (!_didIteratorError) {\n                _context.next = 38;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 38:\n              return _context.finish(35);\n\n            case 39:\n              return _context.finish(30);\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 26, 30, 40], [31,, 35, 39]]);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  return query;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dht/query.js"],"names":["require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","post","timeout","signal","searchParams","arg","toString","headers","res","ndjson","message","responses","map","ID","Addrs","id","addrs","a"],"mappings":"AAAA;;;;;;;;;;;;eAEsBA,OAAO,CAAC,WAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,KAJe;AAAA;AAAA;;AAAA;AAAA,wEAIhC,iBAAwBC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAgCC,cAAAA,OAAhC,2DAA0C,EAA1C;AAAA;AAAA,0CACoBH,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsB;AACtCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADqB;AAEtCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFsB;AAGtCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,EAAEN,MAAM,CAACO,QAAP;AADwB,mBAE1BN,OAF0B,EAHO;AAOtCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPqB,eAAtB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA;AAAA;AAAA,yCAW4BA,GAAG,CAACC,MAAJ,EAX5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWiBC,cAAAA,OAXjB;AAYIA,cAAAA,OAAO,GAAGlB,OAAO,CAACkB,OAAD,CAAjB;AACAA,cAAAA,OAAO,CAACC,SAAR,GAAoB,CAACD,OAAO,CAACC,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B;AAAC;AAAD;AAAA,oBAAkDC,EAAlD,QAAkDA,EAAlD;AAAA,oBAAsDC,KAAtD,QAAsDA,KAAtD;AAAA,uBAAmE;AACnHC,kBAAAA,EAAE,EAAEF,EAD+G;AAEnHG,kBAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkB;AAAC;AAAuBK,kBAAAA,CAAxB;AAAA,2BAA8B,IAAI1B,SAAJ,CAAc0B,CAAd,CAA9B;AAAA,mBAAlB;AAF4G,iBAAnE;AAAA,eAA9B,CAApB;AAbJ;AAiBI,qBAAMP,OAAN;;AAjBJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAyBhC,SAAOZ,KAAP;AACD,CA1ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"]},"metadata":{},"sourceType":"script"}