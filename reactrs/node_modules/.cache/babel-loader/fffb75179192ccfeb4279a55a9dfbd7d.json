{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Block = require('ipld-block');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require = require('any-signal'),\n    anySignal = _require.anySignal;\n\nvar AbortController = require('native-abort-controller');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var options,\n          _multihash$decode,\n          name,\n          length,\n          cid,\n          _multihash$decode2,\n          _name,\n          _length,\n          controller,\n          signal,\n          res,\n          response,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (Block.isBlock(data)) {\n                _multihash$decode = multihash.decode(data.cid.multihash), name = _multihash$decode.name, length = _multihash$decode.length;\n                options = _objectSpread(_objectSpread({}, options), {}, {\n                  format: data.cid.codec,\n                  mhtype: name,\n                  mhlen: length,\n                  version: data.cid.version\n                }); // @ts-ignore - data is typed as block so TS complains about\n                // Uint8Array assignment.\n\n                data = data.data;\n              } else if (options.cid) {\n                cid = new CID(options.cid);\n                _multihash$decode2 = multihash.decode(cid.multihash), _name = _multihash$decode2.name, _length = _multihash$decode2.length;\n                options = _objectSpread(_objectSpread({}, options), {}, {\n                  format: cid.codec,\n                  mhtype: _name,\n                  mhlen: _length,\n                  version: cid.version\n                });\n                delete options.cid;\n              } // allow aborting requests on body errors\n\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.prev = 4;\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 10;\n              return multipartRequest(data, controller, options.headers);\n\n            case 10:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 14;\n              return _context.t0.post.call(_context.t0, 'block/put', _context.t4);\n\n            case 14:\n              response = _context.sent;\n              _context.next = 17;\n              return response.json();\n\n            case 17:\n              res = _context.sent;\n              _context.next = 29;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t5 = _context[\"catch\"](4);\n\n              if (!(options.format === 'dag-pb')) {\n                _context.next = 26;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n                format: 'protobuf'\n              })));\n\n            case 26:\n              if (!(options.format === 'dag-cbor')) {\n                _context.next = 28;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n                format: 'cbor'\n              })));\n\n            case 28:\n              throw _context.t5;\n\n            case 29:\n              return _context.abrupt(\"return\", new Block(\n              /** @type {Uint8Array} */\n              data, new CID(res.Key)));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 20]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/block/put.js"],"names":["Block","require","CID","multihash","multipartRequest","configure","toUrlSearchParams","anySignal","AbortController","module","exports","api","put","data","options","isBlock","decode","cid","name","length","format","codec","mhtype","mhlen","version","controller","signal","timeout","searchParams","headers","post","response","json","res","Key"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  async function put (data, options = {}) {\n    if (Block.isBlock(data)) {\n      const { name, length } = multihash.decode(data.cid.multihash)\n      options = {\n        ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      }\n      // @ts-ignore - data is typed as block so TS complains about\n      // Uint8Array assignment.\n      data = data.data\n    } else if (options.cid) {\n      const cid = new CID(options.cid)\n      const { name, length } = multihash.decode(cid.multihash)\n      options = {\n        ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      }\n      delete options.cid\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return new Block(/** @type {Uint8Array} */(data), new CID(res.Key))\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}