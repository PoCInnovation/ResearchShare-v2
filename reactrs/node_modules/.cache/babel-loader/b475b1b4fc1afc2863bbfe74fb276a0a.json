{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\n\n\nmodule.exports = function (options, subsTracker) {\n  return configure(function (api) {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    function subscribe(_x, _x2) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    function _subscribe() {\n      _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, handler) {\n        var options,\n            done,\n            fail,\n            result,\n            ffWorkaround,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                // eslint-disable-line require-await\n                options.signal = subsTracker.subscribe(topic, handler, options.signal);\n                /** @type {(value?: any) => void} */\n\n                result = new Promise(function (resolve, reject) {\n                  done = resolve;\n                  fail = reject;\n                }); // In Firefox, the initial call to fetch does not resolve until some data\n                // is received. If this doesn't happen within 1 second assume success\n\n                ffWorkaround = setTimeout(function () {\n                  return done();\n                }, 1000); // Do this async to not block Firefox\n\n                api.post('pubsub/sub', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  searchParams: toUrlSearchParams(_objectSpread({\n                    arg: topic\n                  }, options)),\n                  headers: options.headers\n                }).catch(function (err) {\n                  // Initial subscribe fail, ensure we clean up\n                  subsTracker.unsubscribe(topic, handler);\n                  fail(err);\n                }).then(function (response) {\n                  clearTimeout(ffWorkaround);\n\n                  if (!response) {\n                    // if there was no response, the subscribe failed\n                    return;\n                  }\n\n                  readMessages(response, {\n                    onMessage: handler,\n                    onEnd: function onEnd() {\n                      return subsTracker.unsubscribe(topic, handler);\n                    },\n                    onError: options.onError\n                  });\n                  done();\n                });\n                return _context2.abrupt(\"return\", result);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\n\nfunction readMessages(response, _ref) {\n  var onMessage = _ref.onMessage,\n      onEnd = _ref.onEnd,\n      onError = _ref.onError;\n\n  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n  return _regeneratorRuntime.async(function readMessages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          onError = onError || log;\n          _context.prev = 1;\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 4;\n          _iterator = _asyncIterator(response.ndjson());\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 8:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 12:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 28;\n            break;\n          }\n\n          msg = _value;\n          _context.prev = 15;\n\n          if (msg.from) {\n            _context.next = 18;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 25);\n\n        case 18:\n          onMessage({\n            from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n            data: uint8ArrayFromString(msg.data, 'base64pad'),\n            seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n            topicIDs: msg.topicIDs\n          });\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](15);\n          _context.t0.message = \"Failed to parse pubsub message: \".concat(_context.t0.message);\n          onError(_context.t0, false, msg); // Not fatal\n\n        case 25:\n          _iteratorNormalCompletion = true;\n          _context.next = 6;\n          break;\n\n        case 28:\n          _context.next = 34;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t1 = _context[\"catch\"](4);\n          _didIteratorError = true;\n          _iteratorError = _context.t1;\n\n        case 34:\n          _context.prev = 34;\n          _context.prev = 35;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 39;\n            break;\n          }\n\n          _context.next = 39;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 39:\n          _context.prev = 39;\n\n          if (!_didIteratorError) {\n            _context.next = 42;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 42:\n          return _context.finish(39);\n\n        case 43:\n          return _context.finish(34);\n\n        case 44:\n          _context.next = 49;\n          break;\n\n        case 46:\n          _context.prev = 46;\n          _context.t2 = _context[\"catch\"](1);\n\n          if (!isAbortError(_context.t2)) {\n            onError(_context.t2, true); // Fatal\n          }\n\n        case 49:\n          _context.prev = 49;\n          onEnd();\n          return _context.finish(49);\n\n        case 52:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 46, 49, 52], [4, 30, 34, 44], [15, 21], [35,, 39, 43]], Promise);\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nvar isAbortError = function isAbortError(error) {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["uint8ArrayFromString","require","uint8ArrayToString","log","configure","toUrlSearchParams","module","exports","options","subsTracker","api","subscribe","topic","handler","signal","result","Promise","resolve","reject","done","fail","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","ndjson","msg","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,yBAAD,CAApC;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAlC;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,mCAAjB,CAAZ;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,UAACC,OAAD,EAAUC,WAAV,EAA0B;AACzC,SAAOL,SAAS,CAAC,UAACM,GAAD,EAAS;AACxB;AACJ;AACA;AAH4B,aAITC,SAJS;AAAA;AAAA;;AAAA;AAAA,4EAIxB,iBAA0BC,KAA1B,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0CL,gBAAAA,OAA1C,8DAAoD,EAApD;AAA0D;AACxDA,gBAAAA,OAAO,CAACM,MAAR,GAAiBL,WAAW,CAACE,SAAZ,CAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCL,OAAO,CAACM,MAA9C,CAAjB;AAEA;;AAKMC,gBAAAA,MARR,GAQiB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9CC,kBAAAA,IAAI,GAAGF,OAAP;AACAG,kBAAAA,IAAI,GAAGF,MAAP;AACD,iBAHc,CARjB,EAaE;AACA;;AACMG,gBAAAA,YAfR,GAeuBC,UAAU,CAAC;AAAA,yBAAMH,IAAI,EAAV;AAAA,iBAAD,EAAe,IAAf,CAfjC,EAiBE;;AACAT,gBAAAA,GAAG,CAACa,IAAJ,CAAS,YAAT,EAAuB;AACrBC,kBAAAA,OAAO,EAAEhB,OAAO,CAACgB,OADI;AAErBV,kBAAAA,MAAM,EAAEN,OAAO,CAACM,MAFK;AAGrBW,kBAAAA,YAAY,EAAEpB,iBAAiB;AAC7BqB,oBAAAA,GAAG,EAAEd;AADwB,qBAE1BJ,OAF0B,EAHV;AAOrBmB,kBAAAA,OAAO,EAAEnB,OAAO,CAACmB;AAPI,iBAAvB,EASGC,KATH,CASS,UAACC,GAAD,EAAS;AACd;AACApB,kBAAAA,WAAW,CAACqB,WAAZ,CAAwBlB,KAAxB,EAA+BC,OAA/B;AAEAO,kBAAAA,IAAI,CAACS,GAAD,CAAJ;AACD,iBAdH,EAeGE,IAfH,CAeQ,UAACC,QAAD,EAAc;AAClBC,kBAAAA,YAAY,CAACZ,YAAD,CAAZ;;AAEA,sBAAI,CAACW,QAAL,EAAe;AACb;AACA;AACD;;AAEDE,kBAAAA,YAAY,CAACF,QAAD,EAAW;AACrBG,oBAAAA,SAAS,EAAEtB,OADU;AAErBuB,oBAAAA,KAAK,EAAE;AAAA,6BAAM3B,WAAW,CAACqB,WAAZ,CAAwBlB,KAAxB,EAA+BC,OAA/B,CAAN;AAAA,qBAFc;AAGrBwB,oBAAAA,OAAO,EAAE7B,OAAO,CAAC6B;AAHI,mBAAX,CAAZ;AAMAlB,kBAAAA,IAAI;AACL,iBA9BH;AAlBF,kDAkDSJ,MAlDT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJwB;AAAA;AAAA;;AAwDxB,WAAOJ,SAAP;AACD,GAzDe,CAAT,CAyDJH,OAzDI,CAAP;AA0DD,CA3DD;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAe0B,YAAf,CAA6BF,QAA7B;AAAA,MAAyCG,SAAzC,QAAyCA,SAAzC;AAAA,MAAoDC,KAApD,QAAoDA,KAApD;AAAA,MAA2DC,OAA3D,QAA2DA,OAA3D;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEA,UAAAA,OAAO,GAAGA,OAAO,IAAIlC,GAArB;AADF;AAAA;AAAA;AAAA;AAAA,qCAI4B6B,QAAQ,CAACM,MAAT,EAJ5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIqBC,UAAAA,GAJrB;AAAA;;AAAA,cAMaA,GAAG,CAACC,IANjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUQL,UAAAA,SAAS,CAAC;AACRK,YAAAA,IAAI,EAAEtC,kBAAkB,CAACF,oBAAoB,CAACuC,GAAG,CAACC,IAAL,EAAW,WAAX,CAArB,EAA8C,WAA9C,CADhB;AAERC,YAAAA,IAAI,EAAEzC,oBAAoB,CAACuC,GAAG,CAACE,IAAL,EAAW,WAAX,CAFlB;AAGRC,YAAAA,KAAK,EAAE1C,oBAAoB,CAACuC,GAAG,CAACG,KAAL,EAAY,WAAZ,CAHnB;AAIRC,YAAAA,QAAQ,EAAEJ,GAAG,CAACI;AAJN,WAAD,CAAT;AAVR;AAAA;;AAAA;AAAA;AAAA;AAiBQ,sBAAIC,OAAJ,6CAAiD,YAAIA,OAArD;AACAP,UAAAA,OAAO,cAAM,KAAN,EAAaE,GAAb,CAAP,CAlBR,CAkBiC;;AAlBjC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAsBI,cAAI,CAACM,YAAY,aAAjB,EAAwB;AACtBR,YAAAA,OAAO,cAAM,IAAN,CAAP,CADsB,CACH;AACpB;;AAxBL;AAAA;AA0BID,UAAAA,KAAK;AA1BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;AACA;AACA;AACA;;;AACA,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC5B,UAAQA,KAAK,CAACC,IAAd;AACE,SAAK,SAAL;AACE,aAAO,IAAP;AACF;;AACA,SAAK,OAAL;AACE,aAAO,IAAP;;AACF;AACE;AACA;AACA,aAAOD,KAAK,CAACE,IAAN,KAAe,YAAtB;AATJ;AAWD,CAZD","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\nmodule.exports = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}