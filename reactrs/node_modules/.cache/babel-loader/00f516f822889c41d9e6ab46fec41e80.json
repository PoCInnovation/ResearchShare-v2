{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DAGAPI[\"export\"]}\n   */\n  function dagExport(_x) {\n    return _dagExport.apply(this, arguments);\n  }\n\n  function _dagExport() {\n    _dagExport = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(root) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dag/export', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams({\n                  arg: root.toString()\n                }),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.iterator()), _awaitAsyncGenerator), \"t0\", 5);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _dagExport.apply(this, arguments);\n  }\n\n  return dagExport;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dag/export.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","dagExport","root","options","post","timeout","signal","searchParams","arg","toString","headers","res","iterator"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,SAJe;AAAA;AAAA;;AAAA;AAAA,4EAIhC,iBAA4BC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,cAAAA,OAAlC,2DAA4C,EAA5C;AAAA;AAAA,0CACoBH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADsB;AAEvCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFuB;AAGvCC,gBAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,kBAAAA,GAAG,EAAEN,IAAI,CAACO,QAAL;AADyB,iBAAD,CAHQ;AAMvCC,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AANsB,eAAvB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAUE,mFAAQA,GAAG,CAACC,QAAJ,EAAR;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAiBhC,SAAOX,SAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n"]},"metadata":{},"sourceType":"script"}