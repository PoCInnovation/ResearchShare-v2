{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../../lib/configure');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  function rmLink(_x, _x2) {\n    return _rmLink.apply(this, arguments);\n  }\n\n  function _rmLink() {\n    _rmLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, dLink) {\n      var options,\n          res,\n          _yield$res$json,\n          Hash,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              _context.next = 3;\n              return api.post('object/patch/rm-link', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: [\"\".concat(cid), // @ts-ignore loose types\n                  dLink.Name || dLink.name || null]\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Hash = _yield$res$json.Hash;\n              return _context.abrupt(\"return\", CID.parse(Hash));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _rmLink.apply(this, arguments);\n  }\n\n  return rmLink;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/object/patch/rm-link.js"],"names":["require","CID","configure","toUrlSearchParams","module","exports","api","rmLink","cid","dLink","options","post","timeout","signal","searchParams","arg","Name","name","headers","res","json","Hash","parse"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,MAJiB;AAAA;AAAA;;AAAA;AAAA,uEAIhC,iBAAuBC,GAAvB,EAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmCC,cAAAA,OAAnC,2DAA6C,EAA7C;AAAA;AAAA,qBACoBJ,GAAG,CAACK,IAAJ,CAAS,sBAAT,EAAiC;AACjDC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADgC;AAEjDC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFiC;AAGjDC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAE,WACAP,GADA,GAEH;AACAC,kBAAAA,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,IAApB,IAA4B,IAHzB;AADwB,mBAM1BP,OAN0B,EAHkB;AAWjDQ,gBAAAA,OAAO,EAAER,OAAO,CAACQ;AAXgC,eAAjC,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAeyBA,GAAG,CAACC,IAAJ,EAfzB;;AAAA;AAAA;AAeUC,cAAAA,IAfV,mBAeUA,IAfV;AAAA,+CAiBSpB,GAAG,CAACqB,KAAJ,CAAUD,IAAV,CAjBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAuBhC,SAAOd,MAAP;AACD,CAxByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-ignore loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n"]},"metadata":{},"sourceType":"script"}