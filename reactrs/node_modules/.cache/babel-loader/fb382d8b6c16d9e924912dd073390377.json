{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {StatsAPI[\"bw\"]}\n   */\n  function bw() {\n    return _bw.apply(this, arguments);\n  }\n\n  function _bw() {\n    _bw = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('stats/bw', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers,\n                transform: function transform(stats) {\n                  return {\n                    totalIn: BigInt(stats.TotalIn),\n                    totalOut: BigInt(stats.TotalOut),\n                    rateIn: parseFloat(stats.RateIn),\n                    rateOut: parseFloat(stats.RateOut)\n                  };\n                }\n              }));\n\n            case 3:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 5);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _bw.apply(this, arguments);\n  }\n\n  return bw;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/stats/bw.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","bw","options","post","timeout","signal","searchParams","headers","transform","stats","totalIn","BigInt","TotalIn","totalOut","TotalOut","rateIn","parseFloat","RateIn","rateOut","RateOut","res","ndjson"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,qEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqBC,cAAAA,OAArB,2DAA+B,EAA/B;AAAA;AAAA,0CACoBF,GAAG,CAACG,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADoB;AAErCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFqB;AAGrCC,gBAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAHM;AAIrCK,gBAAAA,OAAO,EAAEL,OAAO,CAACK,OAJoB;AAKrCC,gBAAAA,SAAS,EAAE,mBAACC,KAAD;AAAA,yBAAY;AACrBC,oBAAAA,OAAO,EAAEC,MAAM,CAACF,KAAK,CAACG,OAAP,CADM;AAErBC,oBAAAA,QAAQ,EAAEF,MAAM,CAACF,KAAK,CAACK,QAAP,CAFK;AAGrBC,oBAAAA,MAAM,EAAEC,UAAU,CAACP,KAAK,CAACQ,MAAP,CAHG;AAIrBC,oBAAAA,OAAO,EAAEF,UAAU,CAACP,KAAK,CAACU,OAAP;AAJE,mBAAZ;AAAA;AAL0B,eAArB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAcE,mFAAQA,GAAG,CAACC,MAAJ,EAAR;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOpB,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n"]},"metadata":{},"sourceType":"script"}