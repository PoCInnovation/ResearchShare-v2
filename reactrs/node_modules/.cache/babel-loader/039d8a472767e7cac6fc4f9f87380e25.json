{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar multicodec = require('multicodec');\n\nvar loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure(function (api, opts) {\n  var getBlock = require('../block/get')(opts);\n\n  var dagResolve = require('./resolve')(opts);\n\n  var load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n\n  var get = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          resolved,\n          block,\n          codecName,\n          format,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return dagResolve(cid, options);\n\n            case 3:\n              resolved = _context.sent;\n              _context.next = 6;\n              return getBlock(resolved.cid, options);\n\n            case 6:\n              block = _context.sent;\n              codecName = multicodec.getName(resolved.cid.code);\n              _context.next = 10;\n              return load(codecName);\n\n            case 10:\n              format = _context.sent;\n\n              if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n                resolved.remainderPath = '/';\n              }\n\n              return _context.abrupt(\"return\", format.resolver.resolve(block.data, resolved.remainderPath));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function get(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return get;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/dag/get.js"],"names":["configure","require","multicodec","loadFormat","module","exports","api","opts","getBlock","dagResolve","load","ipld","get","cid","options","resolved","block","codecName","getName","code","format","RAW","remainderPath","resolver","resolve","data"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAACM,GAAD,EAAMC,IAAN,EAAe;AACxC,MAAMC,QAAQ,GAAGP,OAAO,CAAC,cAAD,CAAP,CAAwBM,IAAxB,CAAjB;;AACA,MAAME,UAAU,GAAGR,OAAO,CAAC,WAAD,CAAP,CAAqBM,IAArB,CAAnB;;AACA,MAAMG,IAAI,GAAGP,UAAU,CAACI,IAAI,CAACI,IAAN,CAAvB;AAEA;AACF;AACA;;AACE,MAAMC,GAAG;AAAA,wEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,OAAZ,2DAAsB,EAAtB;AAAA;AAAA,qBACaL,UAAU,CAACI,GAAD,EAAMC,OAAN,CADvB;;AAAA;AACJC,cAAAA,QADI;AAAA;AAAA,qBAEUP,QAAQ,CAACO,QAAQ,CAACF,GAAV,EAAeC,OAAf,CAFlB;;AAAA;AAEJE,cAAAA,KAFI;AAIJC,cAAAA,SAJI,GAIQf,UAAU,CAACgB,OAAX,CAAmBH,QAAQ,CAACF,GAAT,CAAaM,IAAhC,CAJR;AAAA;AAAA,qBAKWT,IAAI,CAACO,SAAD,CALf;;AAAA;AAKJG,cAAAA,MALI;;AAOV,kBAAIL,QAAQ,CAACF,GAAT,CAAaM,IAAb,KAAsBjB,UAAU,CAACmB,GAAjC,IAAwC,CAACN,QAAQ,CAACO,aAAtD,EAAqE;AACnEP,gBAAAA,QAAQ,CAACO,aAAT,GAAyB,GAAzB;AACD;;AATS,+CAWHF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwBR,KAAK,CAACS,IAA9B,EAAoCV,QAAQ,CAACO,aAA7C,CAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHV,GAAG;AAAA;AAAA;AAAA,KAAT;;AAcA,SAAOA,GAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts)\n  const dagResolve = require('./resolve')(opts)\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n\n    const codecName = multicodec.getName(resolved.cid.code)\n    const format = await load(codecName)\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath)\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}