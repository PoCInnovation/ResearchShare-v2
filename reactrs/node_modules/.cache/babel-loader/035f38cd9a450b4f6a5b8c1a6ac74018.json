{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar addAll = require('./add-all');\n\nvar last = require('it-last');\n\nvar configure = require('../lib/configure');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\n\n\nmodule.exports = function (config) {\n  var all = addAll(config);\n  return configure(function () {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n\n    function _add() {\n      _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n        var options,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                return _context.abrupt(\"return\", last(all([_objectSpread({\n                  path: path\n                }, options)], options)));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  })(config);\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/pin/add.js"],"names":["addAll","require","last","configure","module","exports","config","all","add","path","options"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAACC,MAAD,EAAY;AAC3B,MAAMC,GAAG,GAAGP,MAAM,CAACM,MAAD,CAAlB;AAEA,SAAOH,SAAS,CAAC,YAAM;AACrB;AACJ;AACA;AAHyB,aAINK,GAJM;AAAA;AAAA;;AAAA;AAAA,sEAIrB,iBAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,gBAAAA,OAA1B,2DAAoC,EAApC;AAAA,iDAESR,IAAI,CAACK,GAAG,CAAC;AACdE,kBAAAA,IAAI,EAAJA;AADc,mBAEXC,OAFW,EAAD,EAGXA,OAHW,CAAJ,CAFb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJqB;AAAA;AAAA;;AAWrB,WAAOF,GAAP;AACD,GAZe,CAAT,CAYJF,MAZI,CAAP;AAaD,CAhBD","sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('../lib/configure')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nmodule.exports = (config) => {\n  const all = addAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-ignore last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n"]},"metadata":{},"sourceType":"script"}