{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bitswap/stat', {\n                searchParams: toUrlSearchParams(options),\n                timeout: options.timeout,\n                signal: options.signal,\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.t0 = toCoreInterface;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n/**\n * @param {any} res\n */\n\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(function (\n    /** @type {{ '/': string }} */\n    k) {\n      return CID.parse(k['/']);\n    }),\n    peers: res.Peers || [],\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/bitswap/stat.js"],"names":["require","CID","configure","toUrlSearchParams","module","exports","api","stat","options","post","searchParams","timeout","signal","headers","res","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","parse","peers","Peers","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"mappings":"AAAA;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqBC,cAAAA,OAArB,2DAA+B,EAA/B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,YAAY,EAAEP,iBAAiB,CAACK,OAAD,CADU;AAEzCG,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OAFwB;AAGzCC,gBAAAA,MAAM,EAAEJ,OAAO,CAACI,MAHyB;AAIzCC,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA,4BAQSC,eART;AAAA;AAAA,qBAQ+BD,GAAG,CAACE,IAAJ,EAR/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAchC,SAAOT,IAAP;AACD,CAfyB,CAA1B;AAiBA;AACA;AACA;;AACA,SAASQ,eAAT,CAA0BD,GAA1B,EAA+B;AAC7B,SAAO;AACLG,IAAAA,aAAa,EAAEH,GAAG,CAACI,aADd;AAELC,IAAAA,QAAQ,EAAE,CAACL,GAAG,CAACM,QAAJ,IAAgB,EAAjB,EAAqBC,GAArB,CAAyB;AAAC;AAA+BC,IAAAA,CAAhC;AAAA,aAAsCrB,GAAG,CAACsB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAAtC;AAAA,KAAzB,CAFL;AAGLE,IAAAA,KAAK,EAAGV,GAAG,CAACW,KAAJ,IAAa,EAHhB;AAILC,IAAAA,cAAc,EAAEC,MAAM,CAACb,GAAG,CAACc,cAAL,CAJjB;AAKLC,IAAAA,YAAY,EAAEF,MAAM,CAACb,GAAG,CAACgB,YAAL,CALf;AAMLC,IAAAA,UAAU,EAAEJ,MAAM,CAACb,GAAG,CAACkB,UAAL,CANb;AAOLC,IAAAA,QAAQ,EAAEN,MAAM,CAACb,GAAG,CAACoB,QAAL,CAPX;AAQLC,IAAAA,eAAe,EAAER,MAAM,CAACb,GAAG,CAACsB,eAAL,CARlB;AASLC,IAAAA,eAAe,EAAEV,MAAM,CAACb,GAAG,CAACwB,eAAL;AATlB,GAAP;AAWD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}