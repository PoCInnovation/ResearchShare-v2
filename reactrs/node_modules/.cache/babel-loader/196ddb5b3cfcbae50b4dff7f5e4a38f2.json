{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Client = require('../../lib/core');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Stat} Stat\n */\n\n\nvar Service = /*#__PURE__*/function () {\n  /**\n   * @param {Options} options\n   */\n  function Service(options) {\n    _classCallCheck(this, Service);\n\n    this.client = new Client(options);\n  }\n  /**\n   * @param {URL} url\n   */\n\n\n  _createClass(Service, null, [{\n    key: \"encodeEndpoint\",\n    value: function encodeEndpoint(url) {\n      var href = String(url);\n\n      if (href === 'undefined') {\n        throw Error('endpoint is required');\n      } // Workaround trailing `/` issue in go-ipfs\n      // @see https://github.com/ipfs/go-ipfs/issues/7826\n\n\n      return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n    }\n    /**\n     * @param {any} json\n     * @returns {RemotePinServiceWithStat}\n     */\n\n  }, {\n    key: \"decodeRemoteService\",\n    value: function decodeRemoteService(json) {\n      return _objectSpread({\n        service: json.Service,\n        endpoint: new URL(json.ApiEndpoint)\n      }, json.Stat && {\n        stat: Service.decodeStat(json.Stat)\n      });\n    }\n    /**\n     * @param {any} json\n     * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n     */\n\n  }, {\n    key: \"decodeStat\",\n    value: function decodeStat(json) {\n      switch (json.Status) {\n        case 'valid':\n          {\n            var _json$PinCount = json.PinCount,\n                Pinning = _json$PinCount.Pinning,\n                Pinned = _json$PinCount.Pinned,\n                Queued = _json$PinCount.Queued,\n                Failed = _json$PinCount.Failed;\n            return {\n              status: 'valid',\n              pinCount: {\n                queued: Queued,\n                pinning: Pinning,\n                pinned: Pinned,\n                failed: Failed\n              }\n            };\n          }\n\n        case 'invalid':\n          {\n            return {\n              status: 'invalid'\n            };\n          }\n\n        default:\n          {\n            return {\n              status: json.Status\n            };\n          }\n      }\n    }\n  }]);\n\n  return Service;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"add\"]}\n */\n\n\nService.prototype.add = /*#__PURE__*/function () {\n  var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, options) {\n    var endpoint, key, headers, timeout, signal;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            endpoint = options.endpoint, key = options.key, headers = options.headers, timeout = options.timeout, signal = options.signal;\n            _context.next = 3;\n            return this.client.post('pin/remote/service/add', {\n              timeout: timeout,\n              signal: signal,\n              searchParams: toUrlSearchParams({\n                arg: [name, Service.encodeEndpoint(endpoint), key]\n              }),\n              headers: headers\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function add(_x, _x2) {\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"rm\"]}\n */\n\n\nService.prototype.rm = /*#__PURE__*/function () {\n  var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n    var options,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            _context2.next = 3;\n            return this.client.post('pin/remote/service/rm', {\n              timeout: options.timeout,\n              signal: options.signal,\n              headers: options.headers,\n              searchParams: toUrlSearchParams({\n                arg: name\n              })\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  function rm(_x3) {\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"ls\"]}\n */\n\n\nService.prototype.ls = /*#__PURE__*/function () {\n  var _ls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var options,\n        stat,\n        headers,\n        timeout,\n        signal,\n        response,\n        _yield$response$json,\n        RemoteServices,\n        _args3 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n            // @ts-ignore cannot derive option type from typedef\n            stat = options.stat, headers = options.headers, timeout = options.timeout, signal = options.signal;\n            _context3.next = 4;\n            return this.client.post('pin/remote/service/ls', {\n              timeout: timeout,\n              signal: signal,\n              headers: headers,\n              searchParams: stat === true ? toUrlSearchParams({\n                stat: stat\n              }) : undefined\n            });\n\n          case 4:\n            response = _context3.sent;\n            _context3.next = 7;\n            return response.json();\n\n          case 7:\n            _yield$response$json = _context3.sent;\n            RemoteServices = _yield$response$json.RemoteServices;\n            return _context3.abrupt(\"return\", RemoteServices.map(Service.decodeRemoteService));\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n}();\n\nmodule.exports = Service;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/pin/remote/service.js"],"names":["Client","require","toUrlSearchParams","Service","options","client","url","href","String","Error","length","slice","json","service","endpoint","URL","ApiEndpoint","Stat","stat","decodeStat","Status","PinCount","Pinning","Pinned","Queued","Failed","status","pinCount","queued","pinning","pinned","failed","prototype","add","name","key","headers","timeout","signal","post","searchParams","arg","encodeEndpoint","rm","ls","undefined","response","RemoteServices","map","decodeRemoteService","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Client = require('../../lib/core')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Stat} Stat\n */\nclass Service {\n  /**\n   * @param {Options} options\n   */\n  constructor (options) {\n    this.client = new Client(options)\n  }\n\n  /**\n   * @param {URL} url\n   */\n  static encodeEndpoint (url) {\n    const href = String(url)\n    if (href === 'undefined') {\n      throw Error('endpoint is required')\n    }\n    // Workaround trailing `/` issue in go-ipfs\n    // @see https://github.com/ipfs/go-ipfs/issues/7826\n    return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n  }\n\n  /**\n   * @param {any} json\n   * @returns {RemotePinServiceWithStat}\n   */\n  static decodeRemoteService (json) {\n    return {\n      service: json.Service,\n      endpoint: new URL(json.ApiEndpoint),\n      ...(json.Stat && { stat: Service.decodeStat(json.Stat) })\n    }\n  }\n\n  /**\n   * @param {any} json\n   * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n   */\n  static decodeStat (json) {\n    switch (json.Status) {\n      case 'valid': {\n        const { Pinning, Pinned, Queued, Failed } = json.PinCount\n        return {\n          status: 'valid',\n          pinCount: {\n            queued: Queued,\n            pinning: Pinning,\n            pinned: Pinned,\n            failed: Failed\n          }\n        }\n      }\n      case 'invalid': {\n        return { status: 'invalid' }\n      }\n      default: {\n        return { status: json.Status }\n      }\n    }\n  }\n}\n\n/**\n * @type {RemotePiningServiceAPI[\"add\"]}\n */\nService.prototype.add = async function add (name, options) {\n  const { endpoint, key, headers, timeout, signal } = options\n\n  await this.client.post('pin/remote/service/add', {\n    timeout,\n    signal,\n    searchParams: toUrlSearchParams({\n      arg: [name, Service.encodeEndpoint(endpoint), key]\n    }),\n    headers\n  })\n}\n\n/**\n * @type {RemotePiningServiceAPI[\"rm\"]}\n */\nService.prototype.rm = async function rm (name, options = {}) {\n  await this.client.post('pin/remote/service/rm', {\n    timeout: options.timeout,\n    signal: options.signal,\n    headers: options.headers,\n    searchParams: toUrlSearchParams({\n      arg: name\n    })\n  })\n}\n\n/**\n * @type {RemotePiningServiceAPI[\"ls\"]}\n */\nService.prototype.ls = async function ls (options = {}) {\n  // @ts-ignore cannot derive option type from typedef\n  const { stat, headers, timeout, signal } = options\n\n  const response = await this.client.post('pin/remote/service/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n  })\n\n  /** @type {{RemoteServices: Object[]}} */\n  const { RemoteServices } = await response.json()\n\n  return RemoteServices.map(Service.decodeRemoteService)\n}\n\nmodule.exports = Service\n"]},"metadata":{},"sourceType":"script"}