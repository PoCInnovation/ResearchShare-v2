{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _yield$res$json,\n          Peers,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('swarm/peers', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Peers = _yield$res$json.Peers;\n              return _context.abrupt(\"return\", (Peers || []).map(function (peer) {\n                return {\n                  addr: new Multiaddr(peer.Addr),\n                  peer: peer.Peer,\n                  muxer: peer.Muxer,\n                  latency: peer.Latency,\n                  streams: peer.Streams,\n                  direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n                };\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _peers.apply(this, arguments);\n  }\n\n  return peers;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/swarm/peers.js"],"names":["require","Multiaddr","configure","toUrlSearchParams","module","exports","api","peers","options","post","timeout","signal","searchParams","headers","res","json","Peers","map","peer","addr","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","undefined"],"mappings":"AAAA;;;;;;eAEsBA,OAAO,CAAC,WAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,KAJiB;AAAA;AAAA;;AAAA;AAAA,sEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsBC,cAAAA,OAAtB,2DAAgC,EAAhC;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADuB;AAExCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFwB;AAGxCC,gBAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAHS;AAIxCK,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJuB,eAAxB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAS0BA,GAAG,CAACC,IAAJ,EAT1B;;AAAA;AAAA;AASUC,cAAAA,KATV,mBASUA,KATV;AAAA,+CAWS,CAACA,KAAK,IAAI,EAAV,EAAcC,GAAd,CAAkB,UAAAC,IAAI,EAAI;AAC/B,uBAAO;AACLC,kBAAAA,IAAI,EAAE,IAAIlB,SAAJ,CAAciB,IAAI,CAACE,IAAnB,CADD;AAELF,kBAAAA,IAAI,EAAEA,IAAI,CAACG,IAFN;AAGLC,kBAAAA,KAAK,EAAEJ,IAAI,CAACK,KAHP;AAILC,kBAAAA,OAAO,EAAEN,IAAI,CAACO,OAJT;AAKLC,kBAAAA,OAAO,EAAER,IAAI,CAACS,OALT;AAMLC,kBAAAA,SAAS,EAAEV,IAAI,CAACW,SAAL,IAAkB,IAAlB,GAAyBC,SAAzB,GAAqCZ,IAAI,CAACW,SAAL,KAAmB,CAAnB,GAAuB,SAAvB,GAAmC;AAN9E,iBAAP;AAQD,eATM,CAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA0BhC,SAAOtB,KAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: new Multiaddr(peer.Addr),\n        peer: peer.Peer,\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n"]},"metadata":{},"sourceType":"script"}