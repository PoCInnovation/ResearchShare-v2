{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  function mv(_x, _x2) {\n    return _mv.apply(this, arguments);\n  }\n\n  function _mv() {\n    _mv = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sources, destination) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n              if (!Array.isArray(sources)) {\n                sources = [sources];\n              }\n\n              _context.next = 4;\n              return api.post('files/mv', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: sources.concat(destination)\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _mv.apply(this, arguments);\n  }\n\n  return mv;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/files/mv.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","mv","sources","destination","options","Array","isArray","post","timeout","signal","searchParams","arg","concat","headers","res","text"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC,iBAAmBC,OAAnB,EAA4BC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyCC,cAAAA,OAAzC,2DAAmD,EAAnD;;AACE,kBAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAL,EAA6B;AAC3BA,gBAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAHH;AAAA,qBAKoBF,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,OAAO,EAAEJ,OAAO,CAACI,OADoB;AAErCC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MAFqB;AAGrCC,gBAAAA,YAAY,EAAEb,iBAAiB;AAC7Bc,kBAAAA,GAAG,EAAET,OAAO,CAACU,MAAR,CAAeT,WAAf;AADwB,mBAE1BC,OAF0B,EAHM;AAOrCS,gBAAAA,OAAO,EAAET,OAAO,CAACS;AAPoB,eAArB,CALpB;;AAAA;AAKQC,cAAAA,GALR;AAAA;AAAA,qBAcQA,GAAG,CAACC,IAAJ,EAdR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAqBhC,SAAOd,EAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n"]},"metadata":{},"sourceType":"script"}