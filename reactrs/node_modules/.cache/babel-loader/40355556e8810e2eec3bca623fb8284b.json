{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\n\n\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  var pin = {\n    type: type,\n    cid: CID.parse(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          paths,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          pin,\n          _i,\n          _Object$keys,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n              /** @type {any[]} */\n              paths = [];\n\n              if (options.paths) {\n                paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('pin/ls', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: paths.map(function (path) {\n                    return \"\".concat(path);\n                  }),\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 16;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 16:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 34;\n                break;\n              }\n\n              pin = _value;\n\n              if (!pin.Keys) {\n                _context.next = 29;\n                break;\n              }\n\n              _i = 0, _Object$keys = Object.keys(pin.Keys);\n\n            case 21:\n              if (!(_i < _Object$keys.length)) {\n                _context.next = 28;\n                break;\n              }\n\n              cid = _Object$keys[_i];\n              _context.next = 25;\n              return toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n\n            case 25:\n              _i++;\n              _context.next = 21;\n              break;\n\n            case 28:\n              return _context.abrupt(\"return\");\n\n            case 29:\n              _context.next = 31;\n              return toPin(pin.Type, pin.Cid, pin.Metadata);\n\n            case 31:\n              _iteratorNormalCompletion = true;\n              _context.next = 10;\n              break;\n\n            case 34:\n              _context.next = 40;\n              break;\n\n            case 36:\n              _context.prev = 36;\n              _context.t0 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 40:\n              _context.prev = 40;\n              _context.prev = 41;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 45;\n                break;\n              }\n\n              _context.next = 45;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 45:\n              _context.prev = 45;\n\n              if (!_didIteratorError) {\n                _context.next = 48;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 48:\n              return _context.finish(45);\n\n            case 49:\n              return _context.finish(40);\n\n            case 50:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 36, 40, 50], [41,, 45, 49]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/pin/ls.js"],"names":["require","CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","module","exports","api","ls","options","paths","Array","isArray","post","timeout","signal","searchParams","arg","map","path","stream","headers","res","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"]},"metadata":{},"sourceType":"script"}