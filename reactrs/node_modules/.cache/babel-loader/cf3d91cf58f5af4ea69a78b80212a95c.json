{"ast":null,"code":"'use strict';\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\n\nmodule.exports = function (obj) {\n  if (obj == null) {\n    return obj;\n  }\n\n  var caps = /^[A-Z]+$/;\n  /** @type {Record<string, any>} */\n\n  var output = {};\n  return Object.keys(obj).reduce(function (camelObj, k) {\n    if (caps.test(k)) {\n      // all caps\n      camelObj[k.toLowerCase()] = obj[k];\n    } else if (caps.test(k[0])) {\n      // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k];\n    } else {\n      camelObj[k] = obj[k];\n    }\n\n    return camelObj;\n  }, output);\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/lib/object-to-camel.js"],"names":["module","exports","obj","caps","output","Object","keys","reduce","camelObj","k","test","toLowerCase","slice"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG,EAAI;AACtB,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,WAAOA,GAAP;AACD;;AAED,MAAMC,IAAI,GAAG,UAAb;AAEA;;AACA,MAAMC,MAAM,GAAG,EAAf;AAEA,SAAOC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,MAAjB,CAAwB,UAACC,QAAD,EAAWC,CAAX,EAAiB;AAC9C,QAAIN,IAAI,CAACO,IAAL,CAAUD,CAAV,CAAJ,EAAkB;AAAE;AAClBD,MAAAA,QAAQ,CAACC,CAAC,CAACE,WAAF,EAAD,CAAR,GAA4BT,GAAG,CAACO,CAAD,CAA/B;AACD,KAFD,MAEO,IAAIN,IAAI,CAACO,IAAL,CAAUD,CAAC,CAAC,CAAD,CAAX,CAAJ,EAAqB;AAAE;AAC5BD,MAAAA,QAAQ,CAACC,CAAC,CAAC,CAAD,CAAD,CAAKE,WAAL,KAAqBF,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAtB,CAAR,GAA4CV,GAAG,CAACO,CAAD,CAA/C;AACD,KAFM,MAEA;AACLD,MAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcP,GAAG,CAACO,CAAD,CAAjB;AACD;;AACD,WAAOD,QAAP;AACD,GATM,EASJJ,MATI,CAAP;AAUD,CApBD","sourcesContent":["'use strict'\n\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nmodule.exports = obj => {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n"]},"metadata":{},"sourceType":"script"}