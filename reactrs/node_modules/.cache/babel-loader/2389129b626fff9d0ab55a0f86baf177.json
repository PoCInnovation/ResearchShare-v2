{"ast":null,"code":"var duration = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([a-zµμ]*)/ig;\n/**\r\n * conversion ratios\r\n */\n\nparse.nanosecond = parse.ns = 1 / 1e6;\nparse['µs'] = parse['μs'] = parse.us = parse.microsecond = 1 / 1e3;\nparse.millisecond = parse.ms = 1;\nparse.second = parse.sec = parse.s = parse.ms * 1000;\nparse.minute = parse.min = parse.m = parse.s * 60;\nparse.hour = parse.hr = parse.h = parse.m * 60;\nparse.day = parse.d = parse.h * 24;\nparse.week = parse.wk = parse.w = parse.d * 7;\nparse.month = parse.b = parse.d * (365.25 / 12);\nparse.year = parse.yr = parse.y = parse.d * 365.25;\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\n\nexport default function parse() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ms';\n  var result = null; // ignore commas\n\n  str = str.replace(/(\\d),(\\d)/g, '$1$2');\n  str.replace(duration, function (_, n, units) {\n    units = parse[units] || parse[units.toLowerCase().replace(/s$/, '')];\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\n  });\n  return result && result / parse[format];\n}","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/parse-duration/index.mjs"],"names":["duration","parse","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","y","str","format","result","replace","_","n","units","toLowerCase","parseFloat"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,0DAAf;AAGA;AACA;AACA;;AAEAC,KAAK,CAACC,UAAN,GACAD,KAAK,CAACE,EAAN,GAAW,IAAI,GADf;AAGAF,KAAK,CAAC,IAAD,CAAL,GACAA,KAAK,CAAC,IAAD,CAAL,GACAA,KAAK,CAACG,EAAN,GACAH,KAAK,CAACI,WAAN,GAAoB,IAAI,GAHxB;AAKAJ,KAAK,CAACK,WAAN,GACAL,KAAK,CAACM,EAAN,GAAW,CADX;AAGAN,KAAK,CAACO,MAAN,GACAP,KAAK,CAACQ,GAAN,GACAR,KAAK,CAACS,CAAN,GAAUT,KAAK,CAACM,EAAN,GAAW,IAFrB;AAIAN,KAAK,CAACU,MAAN,GACAV,KAAK,CAACW,GAAN,GACAX,KAAK,CAACY,CAAN,GAAUZ,KAAK,CAACS,CAAN,GAAU,EAFpB;AAIAT,KAAK,CAACa,IAAN,GACAb,KAAK,CAACc,EAAN,GACAd,KAAK,CAACe,CAAN,GAAUf,KAAK,CAACY,CAAN,GAAU,EAFpB;AAIAZ,KAAK,CAACgB,GAAN,GACAhB,KAAK,CAACiB,CAAN,GAAUjB,KAAK,CAACe,CAAN,GAAU,EADpB;AAGAf,KAAK,CAACkB,IAAN,GACAlB,KAAK,CAACmB,EAAN,GACAnB,KAAK,CAACoB,CAAN,GAAUpB,KAAK,CAACiB,CAAN,GAAU,CAFpB;AAIAjB,KAAK,CAACqB,KAAN,GACArB,KAAK,CAACsB,CAAN,GACAtB,KAAK,CAACiB,CAAN,IAAW,SAAS,EAApB,CAFA;AAIAjB,KAAK,CAACuB,IAAN,GACAvB,KAAK,CAACwB,EAAN,GACAxB,KAAK,CAACyB,CAAN,GAAUzB,KAAK,CAACiB,CAAN,GAAU,MAFpB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASjB,KAAT,GAAmC;AAAA,MAApB0B,GAAoB,uEAAhB,EAAgB;AAAA,MAAZC,MAAY,uEAAL,IAAK;AAChD,MAAIC,MAAM,GAAG,IAAb,CADgD,CAEhD;;AACAF,EAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,YAAZ,EAA0B,MAA1B,CAAN;AACAH,EAAAA,GAAG,CAACG,OAAJ,CAAY9B,QAAZ,EAAsB,UAAS+B,CAAT,EAAYC,CAAZ,EAAeC,KAAf,EAAqB;AACzCA,IAAAA,KAAK,GAAGhC,KAAK,CAACgC,KAAD,CAAL,IAAgBhC,KAAK,CAACgC,KAAK,CAACC,WAAN,GAAoBJ,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAD,CAA7B;AACA,QAAIG,KAAJ,EAAWJ,MAAM,GAAG,CAACA,MAAM,IAAI,CAAX,IAAgBM,UAAU,CAACH,CAAD,EAAI,EAAJ,CAAV,GAAoBC,KAA7C;AACZ,GAHD;AAKA,SAAOJ,MAAM,IAAKA,MAAM,GAAG5B,KAAK,CAAC2B,MAAD,CAAhC;AACD","sourcesContent":["let duration = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([a-zµμ]*)/ig\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3\r\n\r\nparse.millisecond =\r\nparse.ms = 1\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60\r\n\r\nparse.day =\r\nparse.d = parse.h * 24\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12)\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nexport default function parse(str='', format='ms'){\r\n  var result = null\r\n  // ignore commas\r\n  str = str.replace(/(\\d),(\\d)/g, '$1$2')\r\n  str.replace(duration, function(_, n, units){\r\n    units = parse[units] || parse[units.toLowerCase().replace(/s$/, '')]\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units\r\n  })\r\n\r\n  return result && (result / parse[format])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}