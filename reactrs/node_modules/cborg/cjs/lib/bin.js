'use strict';

var process = require('process');
require('../cborg.js');
var diagnostic = require('./diagnostic.js');
var byteUtils = require('./byte-utils.js');
var decode = require('./decode.js');
var encode = require('./encode.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var process__default = /*#__PURE__*/_interopDefaultLegacy(process);

const cmd = process__default['default'].argv[2];
function usage(code) {
  console.error('Usage: cborg <command> <args>');
  console.error('Valid commands:');
  console.error('\thex2diag <hex input>');
  console.error('\thex2json [--pretty] <hex input>');
  console.error('\tjson2hex \'<json input>\'');
  process__default['default'].exit(code || 0);
}
if (cmd === 'help') {
  usage(0);
} else if (cmd === 'hex2json') {
  const argv = process__default['default'].argv.filter(s => s !== '--pretty');
  const pretty = argv.length !== process__default['default'].argv.length;
  if (argv.length < 4) {
    console.error('hex2json requires a hexadecimal input string');
    usage(1);
  }
  const bin = byteUtils.fromHex(argv[3]);
  console.log(JSON.stringify(decode.decode(bin), undefined, pretty ? 2 : undefined));
} else if (cmd === 'hex2diag') {
  if (process__default['default'].argv.length < 4) {
    console.error('hex2diag requires a hexadecimal input string');
    usage(1);
  }
  const bin = byteUtils.fromHex(process__default['default'].argv[3]);
  for (const line of diagnostic.tokensToDiagnostic(bin)) {
    console.log(line);
  }
} else if (cmd === 'json2hex') {
  if (process__default['default'].argv.length < 4) {
    console.error('json2hex requires a JSON input string');
    usage(1);
  }
  const obj = JSON.parse(process__default['default'].argv[3]);
  console.log(byteUtils.toHex(encode.encode(obj)));
} else {
  if (process__default['default'].argv.findIndex(a => a.endsWith('mocha')) === -1) {
    if (cmd) {
      console.error(`Unknown command: '${ cmd }'`);
    }
    usage(1);
  }
}
var bin = true;

module.exports = bin;
