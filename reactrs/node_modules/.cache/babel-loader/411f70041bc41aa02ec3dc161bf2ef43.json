{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _require = require('multiformats/basics'),\n    bases = _require.bases;\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\n\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name: name,\n    prefix: prefix,\n    encoder: {\n      name: name,\n      prefix: prefix,\n      encode: encode\n    },\n    decoder: {\n      decode: decode\n    }\n  };\n}\n\nvar string = createCodec('utf8', 'u', function (buf) {\n  var decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, function (str) {\n  var encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nvar ascii = createCodec('ascii', 'a', function (buf) {\n  var string = 'a';\n\n  for (var i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n\n  return string;\n}, function (str) {\n  str = str.substring(1);\n  var buf = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n});\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\n\nvar BASES = _objectSpread({\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii\n}, bases);\n\nmodule.exports = BASES;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/uint8arrays/util/bases.js"],"names":["require","bases","createCodec","name","prefix","encode","decode","encoder","decoder","string","buf","TextDecoder","str","TextEncoder","substring","ascii","i","length","String","fromCharCode","Uint8Array","charCodeAt","BASES","base16","module","exports"],"mappings":"AAAE;;;;eAEgBA,OAAO,CAAC,qBAAD,C;IAAjBC,K,YAAAA,K;AAER;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoD;AAClD,SAAO;AACLH,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,MAAM,EAANA,MAFK;AAGLG,IAAAA,OAAO,EAAE;AACPJ,MAAAA,IAAI,EAAJA,IADO;AAEPC,MAAAA,MAAM,EAANA,MAFO;AAGPC,MAAAA,MAAM,EAANA;AAHO,KAHJ;AAQLG,IAAAA,OAAO,EAAE;AACPF,MAAAA,MAAM,EAANA;AADO;AARJ,GAAP;AAYD;;AAED,IAAMG,MAAM,GAAGP,WAAW,CAAC,MAAD,EAAS,GAAT,EAAc,UAACQ,GAAD,EAAS;AAC/C,MAAMF,OAAO,GAAG,IAAIG,WAAJ,CAAgB,MAAhB,CAAhB;AACA,SAAO,MAAMH,OAAO,CAACF,MAAR,CAAeI,GAAf,CAAb;AACD,CAHyB,EAGvB,UAACE,GAAD,EAAS;AACV,MAAML,OAAO,GAAG,IAAIM,WAAJ,EAAhB;AACA,SAAON,OAAO,CAACF,MAAR,CAAeO,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAf,CAAP;AACD,CANyB,CAA1B;AAQA,IAAMC,KAAK,GAAGb,WAAW,CAAC,OAAD,EAAU,GAAV,EAAe,UAACQ,GAAD,EAAS;AAC/C,MAAID,MAAM,GAAG,GAAb;;AAEA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCP,IAAAA,MAAM,IAAIS,MAAM,CAACC,YAAP,CAAoBT,GAAG,CAACM,CAAD,CAAvB,CAAV;AACD;;AACD,SAAOP,MAAP;AACD,CAPwB,EAOtB,UAACG,GAAD,EAAS;AACVA,EAAAA,GAAG,GAAGA,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAN;AACA,MAAMJ,GAAG,GAAG,IAAIU,UAAJ,CAAeR,GAAG,CAACK,MAAnB,CAAZ;;AAEA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCN,IAAAA,GAAG,CAACM,CAAD,CAAH,GAASJ,GAAG,CAACS,UAAJ,CAAeL,CAAf,CAAT;AACD;;AAED,SAAON,GAAP;AACD,CAhBwB,CAAzB;AAkBA;AACA;AACA;;AAEA;AACA;AACA;;AACA,IAAMY,KAAK;AACT,UAAQb,MADC;AAET,WAASA,MAFA;AAGT,SAAOR,KAAK,CAACsB,MAHJ;AAIT,YAAUR,KAJD;AAKT,WAASA,KALA;AAMT,YAAUA;AAND,GAQNd,KARM,CAAX;;AAWAuB,MAAM,CAACC,OAAP,GAAiBH,KAAjB","sourcesContent":["  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n"]},"metadata":{},"sourceType":"script"}