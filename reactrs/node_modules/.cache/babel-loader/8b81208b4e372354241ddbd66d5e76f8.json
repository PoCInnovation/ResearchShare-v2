{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(addrs) {\n      var options,\n          res,\n          _yield$res$json,\n          Strings,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              addrs = Array.isArray(addrs) ? addrs : [addrs];\n              _context.next = 4;\n              return api.post('swarm/connect', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: addrs.map(function (addr) {\n                    return \"\".concat(addr);\n                  })\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              _yield$res$json = _context.sent;\n              Strings = _yield$res$json.Strings;\n              return _context.abrupt(\"return\", Strings || []);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/swarm/connect.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","addrs","options","Array","isArray","post","timeout","signal","searchParams","arg","map","addr","headers","res","json","Strings"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AAAA,wEAAO,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAcC,cAAAA,OAAd,2DAAwB,EAAxB;AACLD,cAAAA,KAAK,GAAGE,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAvC;AADK;AAAA,qBAGaD,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,gBAAAA,OAAO,EAAEJ,OAAO,CAACI,OADyB;AAE1CC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MAF0B;AAG1CC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAER,KAAK,CAACS,GAAN,CAAU,UAAAC,IAAI;AAAA,qCAAOA,IAAP;AAAA,mBAAd;AADwB,mBAE1BT,OAF0B,EAHW;AAO1CU,gBAAAA,OAAO,EAAEV,OAAO,CAACU;AAPyB,eAA1B,CAHb;;AAAA;AAGCC,cAAAA,GAHD;AAAA;AAAA,qBAYqBA,GAAG,CAACC,IAAJ,EAZrB;;AAAA;AAAA;AAYGC,cAAAA,OAZH,mBAYGA,OAZH;AAAA,+CAcEA,OAAO,IAAI,EAdb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAgBD,CAjByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (addrs, options = {}) => {\n    addrs = Array.isArray(addrs) ? addrs : [addrs]\n\n    const res = await api.post('swarm/connect', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addrs.map(addr => `${addr}`),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n})\n"]},"metadata":{},"sourceType":"script"}