{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../../lib/configure');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  function addLink(_x, _x2) {\n    return _addLink.apply(this, arguments);\n  }\n\n  function _addLink() {\n    _addLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, dLink) {\n      var options,\n          res,\n          _yield$res$json,\n          Hash,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              _context.next = 3;\n              return api.post('object/patch/add-link', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: [\"\".concat(cid), // @ts-ignore loose types\n                  dLink.Name || dLink.name || '', // @ts-ignore loose types\n                  (dLink.Hash || dLink.cid || '').toString() || null]\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Hash = _yield$res$json.Hash;\n              return _context.abrupt(\"return\", CID.parse(Hash));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addLink.apply(this, arguments);\n  }\n\n  return addLink;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/object/patch/add-link.js"],"names":["require","CID","configure","toUrlSearchParams","module","exports","api","addLink","cid","dLink","options","post","timeout","signal","searchParams","arg","Name","name","Hash","toString","headers","res","json","parse"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,OAJiB;AAAA;AAAA;;AAAA;AAAA,wEAIhC,iBAAwBC,GAAxB,EAA6BC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoCC,cAAAA,OAApC,2DAA8C,EAA9C;AAAA;AAAA,qBACoBJ,GAAG,CAACK,IAAJ,CAAS,uBAAT,EAAkC;AAClDC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADiC;AAElDC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFkC;AAGlDC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAE,WACAP,GADA,GAEH;AACAC,kBAAAA,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,IAApB,IAA4B,EAHzB,EAIH;AACA,mBAACR,KAAK,CAACS,IAAN,IAAcT,KAAK,CAACD,GAApB,IAA2B,EAA5B,EAAgCW,QAAhC,MAA8C,IAL3C;AADwB,mBAQ1BT,OAR0B,EAHmB;AAalDU,gBAAAA,OAAO,EAAEV,OAAO,CAACU;AAbiC,eAAlC,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAiByBA,GAAG,CAACC,IAAJ,EAjBzB;;AAAA;AAAA;AAiBUJ,cAAAA,IAjBV,mBAiBUA,IAjBV;AAAA,+CAmBSjB,GAAG,CAACsB,KAAJ,CAAUL,IAAV,CAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA0BhC,SAAOX,OAAP;AACD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-ignore loose types\n          dLink.Name || dLink.name || '',\n          // @ts-ignore loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n"]},"metadata":{},"sourceType":"script"}