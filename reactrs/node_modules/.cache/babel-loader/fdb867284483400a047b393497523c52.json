{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('./util'),\n    encodeText = _require.encodeText;\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\n\n\nvar Base = /*#__PURE__*/function () {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  function Base(name, code, factory, alphabet) {\n    _classCallCheck(this, Base);\n\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n\n\n  _createClass(Base, [{\n    key: \"encode\",\n    value: function encode(buf) {\n      return this.codec.encode(buf);\n    }\n    /**\n     * @param {string} string\n     * @returns {Uint8Array}\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(string) {\n      var _iterator = _createForOfIteratorHelper(string),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n\n          if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n            throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this.codec.decode(string);\n    }\n  }]);\n\n  return Base;\n}();\n\nmodule.exports = Base;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/multibase/src/base.js"],"names":["require","encodeText","Base","name","code","factory","alphabet","codeBuf","codec","buf","encode","string","char","indexOf","Error","decode","module","exports"],"mappings":"AAAA;;;;;;;;eAEuBA,OAAO,CAAC,QAAD,C;IAAtBC,U,YAAAA,U;AAER;;AACA;;AACA;;AAEA;AACA;AACA;AACA;;;IACMC,I;AACJ;AACF;AACA;AACA;AACA;AACA;AACE,gBAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C;AAAA;;AAC1C,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKG,OAAL,GAAeN,UAAU,CAAC,KAAKG,IAAN,CAAzB;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKE,KAAL,GAAaH,OAAO,CAACC,QAAD,CAApB;AACD;AAED;AACF;AACA;AACA;;;;;WACE,gBAAQG,GAAR,EAAa;AACX,aAAO,KAAKD,KAAL,CAAWE,MAAX,CAAkBD,GAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;;;;WACE,gBAAQE,MAAR,EAAgB;AAAA,iDACKA,MADL;AAAA;;AAAA;AACd,4DAA2B;AAAA,cAAhBC,IAAgB;;AACzB,cAAI,KAAKN,QAAL,IAAiB,KAAKA,QAAL,CAAcO,OAAd,CAAsBD,IAAtB,IAA8B,CAAnD,EAAsD;AACpD,kBAAM,IAAIE,KAAJ,8BAAgCF,IAAhC,mBAA6CD,MAA7C,OAAN;AACD;AACF;AALa;AAAA;AAAA;AAAA;AAAA;;AAMd,aAAO,KAAKH,KAAL,CAAWO,MAAX,CAAkBJ,MAAlB,CAAP;AACD;;;;;;AAGHK,MAAM,CAACC,OAAP,GAAiBf,IAAjB","sourcesContent":["'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n"]},"metadata":{},"sourceType":"script"}