{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar LOAD_CODEC = function LOAD_CODEC(codeOrName) {\n  return Promise.reject(new Error(\"No codec found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\n\nvar Multicodecs = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  function Multicodecs(options) {\n    _classCallCheck(this, Multicodecs);\n\n    // Object with current list of active resolvers\n\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}; // Object with current list of active resolvers\n\n    /** @type {Record<number, BlockCodec>}} */\n\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC; // Enable all supplied codecs\n\n    var _iterator = _createForOfIteratorHelper(options.codecs),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var codec = _step.value;\n        this.addCodec(codec);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n\n\n  _createClass(Multicodecs, [{\n    key: \"addCodec\",\n    value: function addCodec(codec) {\n      if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(codec.name, \"\\\"\"));\n      }\n\n      this._codecsByName[codec.name] = codec;\n      this._codecsByCode[codec.code] = codec;\n    }\n    /**\n     * Remove support for a block codec\n     *\n     * @param {BlockCodec} codec\n     */\n\n  }, {\n    key: \"removeCodec\",\n    value: function removeCodec(codec) {\n      delete this._codecsByName[codec.name];\n      delete this._codecsByCode[codec.code];\n    }\n    /**\n     * @param {number | string} code\n     */\n\n  }, {\n    key: \"getCodec\",\n    value: function () {\n      var _getCodec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(code) {\n        var table, codec;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n\n                if (!table[code]) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", table[code]);\n\n              case 3:\n                _context.next = 5;\n                return this._loadCodec(code);\n\n              case 5:\n                codec = _context.sent;\n\n                if (table[code] == null) {\n                  this.addCodec(codec);\n                }\n\n                return _context.abrupt(\"return\", codec);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCodec(_x) {\n        return _getCodec.apply(this, arguments);\n      }\n\n      return getCodec;\n    }()\n  }, {\n    key: \"listCodecs\",\n    value: function listCodecs() {\n      return Object.values(this._codecsByName);\n    }\n  }]);\n\n  return Multicodecs;\n}();\n\nmodule.exports = Multicodecs;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-core-utils/src/multicodecs.js"],"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codecs","codec","addCodec","name","code","table","Object","values","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AACA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD;AAAA,SAAgBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,gCAAiCH,UAAjC,QAAf,CAAhB;AAAA,CAAnB;;IAEMI,W;AACJ;AACF;AACA;AACA;AACA;AACE,uBAAaC,OAAb,EAAsB;AAAA;;AACpB;;AACA;AACA,SAAKC,aAAL,GAAqB,EAArB,CAHoB,CAKpB;;AACA;;AACA,SAAKC,aAAL,GAAqB,EAArB;AAEA,SAAKC,UAAL,GAAkBH,OAAO,CAACI,SAAR,IAAqBV,UAAvC,CAToB,CAWpB;;AAXoB,+CAYAM,OAAO,CAACK,MAZR;AAAA;;AAAA;AAYpB,0DAAoC;AAAA,YAAzBC,KAAyB;AAClC,aAAKC,QAAL,CAAcD,KAAd;AACD;AAdmB;AAAA;AAAA;AAAA;AAAA;AAerB;AAED;AACF;AACA;AACA;AACA;;;;;WACE,kBAAUA,KAAV,EAAiB;AACf,UAAI,KAAKL,aAAL,CAAmBK,KAAK,CAACE,IAAzB,KAAkC,KAAKN,aAAL,CAAmBI,KAAK,CAACG,IAAzB,CAAtC,EAAsE;AACpE,cAAM,IAAIX,KAAJ,+CAAgDQ,KAAK,CAACE,IAAtD,QAAN;AACD;;AAED,WAAKP,aAAL,CAAmBK,KAAK,CAACE,IAAzB,IAAiCF,KAAjC;AACA,WAAKJ,aAAL,CAAmBI,KAAK,CAACG,IAAzB,IAAiCH,KAAjC;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,qBAAaA,KAAb,EAAoB;AAClB,aAAO,KAAKL,aAAL,CAAmBK,KAAK,CAACE,IAAzB,CAAP;AACA,aAAO,KAAKN,aAAL,CAAmBI,KAAK,CAACG,IAAzB,CAAP;AACD;AAED;AACF;AACA;;;;;+EACE,iBAAgBA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,KADR,GACgB,OAAOD,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,aAAhC,GAAgD,KAAKC,aADrE;;AAAA,qBAGMQ,KAAK,CAACD,IAAD,CAHX;AAAA;AAAA;AAAA;;AAAA,iDAIWC,KAAK,CAACD,IAAD,CAJhB;;AAAA;AAAA;AAAA,uBAQsB,KAAKN,UAAL,CAAgBM,IAAhB,CARtB;;AAAA;AAQQH,gBAAAA,KARR;;AAUE,oBAAII,KAAK,CAACD,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,uBAAKF,QAAL,CAAcD,KAAd;AACD;;AAZH,iDAcSA,KAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAiBA,sBAAc;AACZ,aAAOK,MAAM,CAACC,MAAP,CAAc,KAAKX,aAAnB,CAAP;AACD;;;;;;AAGHY,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["'use strict'\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nclass Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n\nmodule.exports = Multicodecs\n"]},"metadata":{},"sourceType":"script"}