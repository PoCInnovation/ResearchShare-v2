{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/id')>}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          data,\n          output,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('id', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              output = toCamel(data);\n\n              if (output.addresses) {\n                output.addresses = output.addresses.map(function (ma) {\n                  return multiaddr(ma);\n                });\n              }\n\n              return _context.abrupt(\"return\", output);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/id.js"],"names":["toCamel","require","multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","post","timeout","signal","searchParams","headers","res","json","data","output","addresses","map","ma"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBC,cAAAA,OAAnB,2DAA6B,EAA7B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,IAAT,EAAe;AAC/BC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADc;AAE/BC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFe;AAG/BC,gBAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAHA;AAI/BK,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJc,eAAf,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAOqBA,GAAG,CAACC,IAAJ,EAPrB;;AAAA;AAOQC,cAAAA,IAPR;AASQC,cAAAA,MATR,GASiBlB,OAAO,CAACiB,IAAD,CATxB;;AAWE,kBAAIC,MAAM,CAACC,SAAX,EAAsB;AACpBD,gBAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB,UAAAC,EAAE;AAAA,yBAAInB,SAAS,CAACmB,EAAD,CAAb;AAAA,iBAAvB,CAAnB;AACD;;AAbH,+CAeSH,MAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAqBhC,SAAOV,EAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst multiaddr = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/id')>}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = toCamel(data)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map(ma => multiaddr(ma))\n    }\n\n    return output\n  }\n  return id\n})\n"]},"metadata":{},"sourceType":"script"}