{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n/**\n * @typedef {import('ipfs-core-types/src/pubsub').MessageHandlerFn} MessageHandlerFn\n *\n * @typedef {Object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\n\nvar SubscriptionTracker = /*#__PURE__*/function () {\n  function SubscriptionTracker() {\n    _classCallCheck(this, SubscriptionTracker);\n\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map();\n  }\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n\n\n  _createClass(SubscriptionTracker, [{\n    key: \"subscribe\",\n    value: function subscribe(topic, handler, signal) {\n      var _this = this;\n\n      var topicSubs = this._subs.get(topic) || [];\n\n      if (topicSubs.find(function (s) {\n        return s.handler === handler;\n      })) {\n        throw new Error(\"Already subscribed to \".concat(topic, \" with this handler\"));\n      } // Create controller so a call to unsubscribe can cancel the request\n\n\n      var controller = new AbortController();\n\n      this._subs.set(topic, [{\n        handler: handler,\n        controller: controller\n      }].concat(topicSubs)); // If there is an external signal, forward the abort event\n\n\n      if (signal) {\n        signal.addEventListener('abort', function () {\n          return _this.unsubscribe(topic, handler);\n        });\n      }\n\n      return controller.signal;\n    }\n    /**\n     * @param {string} topic\n     * @param {MessageHandlerFn} [handler]\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topic, handler) {\n      var subs = this._subs.get(topic) || [];\n      var unsubs;\n\n      if (handler) {\n        this._subs.set(topic, subs.filter(function (s) {\n          return s.handler !== handler;\n        }));\n\n        unsubs = subs.filter(function (s) {\n          return s.handler === handler;\n        });\n      } else {\n        this._subs.set(topic, []);\n\n        unsubs = subs;\n      }\n\n      if (!(this._subs.get(topic) || []).length) {\n        this._subs.delete(topic);\n      }\n\n      unsubs.forEach(function (s) {\n        return s.controller.abort();\n      });\n    }\n  }]);\n\n  return SubscriptionTracker;\n}();\n\nmodule.exports = SubscriptionTracker;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js"],"names":["require","AbortController","SubscriptionTracker","_subs","Map","topic","handler","signal","topicSubs","get","find","s","Error","controller","set","concat","addEventListener","unsubscribe","subs","unsubs","filter","length","delete","forEach","abort","module","exports"],"mappings":"AAAA;;;;;;eAE4BA,OAAO,CAAC,yBAAD,C;IAA3BC,e,YAAAA,e;AAER;AACA;AACA;AACA;AACA;AACA;AACA;;;IAEMC,mB;AACJ,iCAAe;AAAA;;AACb;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;;;WACE,mBAAWC,KAAX,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAAA;;AACjC,UAAMC,SAAS,GAAG,KAAKL,KAAL,CAAWM,GAAX,CAAeJ,KAAf,KAAyB,EAA3C;;AAEA,UAAIG,SAAS,CAACE,IAAV,CAAe,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlB;AAAA,OAAhB,CAAJ,EAAgD;AAC9C,cAAM,IAAIM,KAAJ,iCAAmCP,KAAnC,wBAAN;AACD,OALgC,CAOjC;;;AACA,UAAMQ,UAAU,GAAG,IAAIZ,eAAJ,EAAnB;;AAEA,WAAKE,KAAL,CAAWW,GAAX,CAAeT,KAAf,EAAsB,CAAC;AAAEC,QAAAA,OAAO,EAAPA,OAAF;AAAWO,QAAAA,UAAU,EAAVA;AAAX,OAAD,EAA0BE,MAA1B,CAAiCP,SAAjC,CAAtB,EAViC,CAYjC;;;AACA,UAAID,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACS,gBAAP,CAAwB,OAAxB,EAAiC;AAAA,iBAAM,KAAI,CAACC,WAAL,CAAiBZ,KAAjB,EAAwBC,OAAxB,CAAN;AAAA,SAAjC;AACD;;AAED,aAAOO,UAAU,CAACN,MAAlB;AACD;AAED;AACF;AACA;AACA;;;;WACE,qBAAaF,KAAb,EAAoBC,OAApB,EAA6B;AAC3B,UAAMY,IAAI,GAAG,KAAKf,KAAL,CAAWM,GAAX,CAAeJ,KAAf,KAAyB,EAAtC;AACA,UAAIc,MAAJ;;AAEA,UAAIb,OAAJ,EAAa;AACX,aAAKH,KAAL,CAAWW,GAAX,CAAeT,KAAf,EAAsBa,IAAI,CAACE,MAAL,CAAY,UAAAT,CAAC;AAAA,iBAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlB;AAAA,SAAb,CAAtB;;AACAa,QAAAA,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAY,UAAAT,CAAC;AAAA,iBAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlB;AAAA,SAAb,CAAT;AACD,OAHD,MAGO;AACL,aAAKH,KAAL,CAAWW,GAAX,CAAeT,KAAf,EAAsB,EAAtB;;AACAc,QAAAA,MAAM,GAAGD,IAAT;AACD;;AAED,UAAI,CAAC,CAAC,KAAKf,KAAL,CAAWM,GAAX,CAAeJ,KAAf,KAAyB,EAA1B,EAA8BgB,MAAnC,EAA2C;AACzC,aAAKlB,KAAL,CAAWmB,MAAX,CAAkBjB,KAAlB;AACD;;AAEDc,MAAAA,MAAM,CAACI,OAAP,CAAe,UAAAZ,CAAC;AAAA,eAAIA,CAAC,CAACE,UAAF,CAAaW,KAAb,EAAJ;AAAA,OAAhB;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBxB,mBAAjB","sourcesContent":["'use strict'\n\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-core-types/src/pubsub').MessageHandlerFn} MessageHandlerFn\n *\n * @typedef {Object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nclass SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n\nmodule.exports = SubscriptionTracker\n"]},"metadata":{},"sourceType":"script"}