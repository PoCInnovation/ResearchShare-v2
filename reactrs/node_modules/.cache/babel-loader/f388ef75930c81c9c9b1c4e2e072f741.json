{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  function localAddrs() {\n    return _localAddrs.apply(this, arguments);\n  }\n\n  function _localAddrs() {\n    _localAddrs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _yield$res$json,\n          Strings,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('swarm/addrs/local', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Strings = _yield$res$json.Strings;\n              return _context.abrupt(\"return\", (Strings || []).map(function (a) {\n                return new Multiaddr(a);\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _localAddrs.apply(this, arguments);\n  }\n\n  return localAddrs;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/swarm/localAddrs.js"],"names":["require","Multiaddr","configure","toUrlSearchParams","module","exports","api","localAddrs","options","post","timeout","signal","searchParams","headers","res","json","Strings","map","a"],"mappings":"AAAA;;;;;;eAEsBA,OAAO,CAAC,WAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,UAJiB;AAAA;AAAA;;AAAA;AAAA,2EAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA2BC,cAAAA,OAA3B,2DAAqC,EAArC;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,mBAAT,EAA8B;AAC9CC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OAD6B;AAE9CC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAF8B;AAG9CC,gBAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAHe;AAI9CK,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJ6B,eAA9B,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAS4BA,GAAG,CAACC,IAAJ,EAT5B;;AAAA;AAAA;AASUC,cAAAA,OATV,mBASUA,OATV;AAAA,+CAWS,CAACA,OAAO,IAAI,EAAZ,EAAgBC,GAAhB,CAAoB,UAAAC,CAAC;AAAA,uBAAI,IAAIjB,SAAJ,CAAciB,CAAd,CAAJ;AAAA,eAArB,CAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAiBhC,SAAOX,UAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => new Multiaddr(a))\n  }\n  return localAddrs\n})\n"]},"metadata":{},"sourceType":"script"}