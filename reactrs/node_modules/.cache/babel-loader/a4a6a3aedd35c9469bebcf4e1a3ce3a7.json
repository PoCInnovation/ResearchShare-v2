{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar Tar = require('it-tar');\n\nvar CID = require('cids');\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar map = require('it-map');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/get')>}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          res,\n          extractor,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          _value2,\n          header,\n          body,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('get', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(path instanceof Uint8Array ? new CID(path) : path)\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              extractor = Tar.extract();\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(extractor(res.iterator()));\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 15;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 15:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 28;\n                break;\n              }\n\n              _value2 = _value, header = _value2.header, body = _value2.body;\n\n              if (!(header.type === 'directory')) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 21;\n              return {\n                type: 'dir',\n                path: header.name\n              };\n\n            case 21:\n              _context.next = 25;\n              break;\n\n            case 23:\n              _context.next = 25;\n              return {\n                type: 'file',\n                path: header.name,\n                content: map(body, function (chunk) {\n                  return chunk.slice();\n                }) // convert bl to Buffer/Uint8Array\n\n              };\n\n            case 25:\n              _iteratorNormalCompletion = true;\n              _context.next = 9;\n              break;\n\n            case 28:\n              _context.next = 34;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 34:\n              _context.prev = 34;\n              _context.prev = 35;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 39;\n                break;\n              }\n\n              _context.next = 39;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 39:\n              _context.prev = 39;\n\n              if (!_didIteratorError) {\n                _context.next = 42;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 42:\n              return _context.finish(39);\n\n            case 43:\n              return _context.finish(34);\n\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 30, 34, 44], [35,, 39, 43]]);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/get.js"],"names":["Tar","require","CID","configure","toUrlSearchParams","map","module","exports","api","get","path","options","post","timeout","signal","searchParams","arg","Uint8Array","headers","res","extractor","extract","iterator","header","body","type","name","content","chunk","slice"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;;AACA,IAAMI,GAAG,GAAGJ,OAAO,CAAC,QAAD,CAAnB;;AAEAK,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,GAJe;AAAA;AAAA;;AAAA;AAAA,sEAIhC,iBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA4BC,cAAAA,OAA5B,2DAAsC,EAAtC;AAAA;AAAA,0CACoBH,GAAG,CAACI,IAAJ,CAAS,KAAT,EAAgB;AAChCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADe;AAEhCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFgB;AAGhCC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,YAAKN,IAAI,YAAYO,UAAhB,GAA6B,IAAIf,GAAJ,CAAQQ,IAAR,CAA7B,GAA6CA,IAAlD;AAD0B,mBAE1BC,OAF0B,EAHC;AAOhCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPe,eAAhB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAWQC,cAAAA,SAXR,GAWoBpB,GAAG,CAACqB,OAAJ,EAXpB;AAAA;AAAA;AAAA;AAAA,yCAauCD,SAAS,CAACD,GAAG,CAACG,QAAJ,EAAD,CAbhD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,gCAaqBC,MAbrB,WAaqBA,MAbrB,EAa6BC,IAb7B,WAa6BA,IAb7B;;AAAA,oBAcQD,MAAM,CAACE,IAAP,KAAgB,WAdxB;AAAA;AAAA;AAAA;;AAAA;AAiBM,qBAAM;AACJA,gBAAAA,IAAI,EAAE,KADF;AAEJf,gBAAAA,IAAI,EAAEa,MAAM,CAACG;AAFT,eAAN;;AAjBN;AAAA;AAAA;;AAAA;AAAA;AAwBM,qBAAM;AACJD,gBAAAA,IAAI,EAAE,MADF;AAEJf,gBAAAA,IAAI,EAAEa,MAAM,CAACG,IAFT;AAGJC,gBAAAA,OAAO,EAAEtB,GAAG,CAACmB,IAAD,EAAO,UAACI,KAAD;AAAA,yBAAWA,KAAK,CAACC,KAAN,EAAX;AAAA,iBAAP,CAHR,CAGyC;;AAHzC,eAAN;;AAxBN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAqChC,SAAOpB,GAAP;AACD,CAtCyB,CAA1B","sourcesContent":["'use strict'\n\nconst Tar = require('it-tar')\nconst CID = require('cids')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst map = require('it-map')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('.').Implements<typeof import('ipfs-core/src/components/get')>}\n   */\n  async function * get (path, options = {}) {\n    const res = await api.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path instanceof Uint8Array ? new CID(path) : path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const extractor = Tar.extract()\n\n    for await (const { header, body } of extractor(res.iterator())) {\n      if (header.type === 'directory') {\n        // @ts-ignore - Missing the following properties from type 'Directory':\n        // cid, name, size, depthts\n        yield {\n          type: 'dir',\n          path: header.name\n        }\n      } else {\n        // @ts-ignore - Missing the following properties from type 'File':\n        // cid, name, size, depthts\n        yield {\n          type: 'file',\n          path: header.name,\n          content: map(body, (chunk) => chunk.slice()) // convert bl to Buffer/Uint8Array\n        }\n      }\n    }\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}