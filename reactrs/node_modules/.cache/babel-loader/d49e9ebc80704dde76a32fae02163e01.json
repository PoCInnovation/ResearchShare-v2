{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n/**\n * @param {Pinnable} input\n */\n\n\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var iterator, first, _iterator3, _step3, cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _cid, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _obj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!(input instanceof CID)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toPin({\n              cid: input\n            });\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toPin({\n              path: input\n            });\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return toPin(input);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 62;\n              break;\n            }\n\n            // @ts-ignore\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 19:\n            if (!(first.value instanceof CID || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 22;\n            return toPin({\n              cid: first.value\n            });\n\n          case 22:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 23;\n\n            _iterator3.s();\n\n          case 25:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 31;\n              break;\n            }\n\n            cid = _step3.value;\n            _context.next = 29;\n            return toPin({\n              cid: cid\n            });\n\n          case 29:\n            _context.next = 25;\n            break;\n\n          case 31:\n            _context.next = 36;\n            break;\n\n          case 33:\n            _context.prev = 33;\n            _context.t0 = _context[\"catch\"](23);\n\n            _iterator3.e(_context.t0);\n\n          case 36:\n            _context.prev = 36;\n\n            _iterator3.f();\n\n            return _context.finish(36);\n\n          case 39:\n            return _context.abrupt(\"return\");\n\n          case 40:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 61;\n              break;\n            }\n\n            _context.next = 43;\n            return toPin(first.value);\n\n          case 43:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 44;\n\n            _iterator4.s();\n\n          case 46:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 52;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 50;\n            return toPin(obj);\n\n          case 50:\n            _context.next = 46;\n            break;\n\n          case 52:\n            _context.next = 57;\n            break;\n\n          case 54:\n            _context.prev = 54;\n            _context.t1 = _context[\"catch\"](44);\n\n            _iterator4.e(_context.t1);\n\n          case 57:\n            _context.prev = 57;\n\n            _iterator4.f();\n\n            return _context.finish(57);\n\n          case 60:\n            return _context.abrupt(\"return\");\n\n          case 61:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 62:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 146;\n              break;\n            }\n\n            // @ts-ignore\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 66;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 66:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 69;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 69:\n            if (!(_first.value instanceof CID || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 107;\n              break;\n            }\n\n            _context.next = 72;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 72:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 74;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 76:\n            _context.next = 78;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 78:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 82;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 82:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 90;\n              break;\n            }\n\n            _cid = _value;\n            _context.next = 87;\n            return toPin({\n              cid: _cid\n            });\n\n          case 87:\n            _iteratorNormalCompletion = true;\n            _context.next = 76;\n            break;\n\n          case 90:\n            _context.next = 96;\n            break;\n\n          case 92:\n            _context.prev = 92;\n            _context.t2 = _context[\"catch\"](74);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 96:\n            _context.prev = 96;\n            _context.prev = 97;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 101;\n              break;\n            }\n\n            _context.next = 101;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 101:\n            _context.prev = 101;\n\n            if (!_didIteratorError) {\n              _context.next = 104;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 104:\n            return _context.finish(101);\n\n          case 105:\n            return _context.finish(96);\n\n          case 106:\n            return _context.abrupt(\"return\");\n\n          case 107:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 145;\n              break;\n            }\n\n            _context.next = 110;\n            return toPin(_first.value);\n\n          case 110:\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 112;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 114:\n            _context.next = 116;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 116:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 120;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 120:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 128;\n              break;\n            }\n\n            _obj = _value2;\n            _context.next = 125;\n            return toPin(_obj);\n\n          case 125:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 114;\n            break;\n\n          case 128:\n            _context.next = 134;\n            break;\n\n          case 130:\n            _context.prev = 130;\n            _context.t3 = _context[\"catch\"](112);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 134:\n            _context.prev = 134;\n            _context.prev = 135;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 139;\n              break;\n            }\n\n            _context.next = 139;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 139:\n            _context.prev = 139;\n\n            if (!_didIteratorError2) {\n              _context.next = 142;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 142:\n            return _context.finish(139);\n\n          case 143:\n            return _context.finish(134);\n\n          case 144:\n            return _context.abrupt(\"return\");\n\n          case 145:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 146:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 147:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[23, 33, 36, 39], [44, 54, 57, 60], [74, 92, 96, 106], [97,, 101, 105], [112, 130, 134, 144], [135,, 139, 143]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = {\n  normaliseInput: normaliseInput\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"names":["errCode","require","CID","normaliseInput","input","undefined","Error","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nasync function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  if (input instanceof CID) {\n    yield toPin({ cid: input })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (first.value instanceof CID || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n\nmodule.exports = {\n  normaliseInput\n}\n"]},"metadata":{},"sourceType":"script"}