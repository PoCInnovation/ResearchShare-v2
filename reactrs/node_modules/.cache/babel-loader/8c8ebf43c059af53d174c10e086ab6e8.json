{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  function wantlistForPeer(_x) {\n    return _wantlistForPeer.apply(this, arguments);\n  }\n\n  function _wantlistForPeer() {\n    _wantlistForPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('bitswap/wantlist', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  peer: peerId.toString()\n                })),\n                headers: options.headers\n              });\n\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n\n            case 5:\n              res = _context.sent;\n              return _context.abrupt(\"return\", (res.Keys || []).map(function (\n              /** @type {{ '/': string }} */\n              k) {\n                return CID.parse(k['/']);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _wantlistForPeer.apply(this, arguments);\n  }\n\n  return wantlistForPeer;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"names":["require","CID","configure","toUrlSearchParams","module","exports","api","wantlistForPeer","peerId","options","post","timeout","signal","searchParams","peer","toString","headers","json","res","Keys","map","k","parse"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,eAJiB;AAAA;AAAA;;AAAA;AAAA,gFAIhC,iBAAgCC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwCC,cAAAA,OAAxC,2DAAkD,EAAlD;AAAA;AAAA,qBAC2BH,GAAG,CAACI,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADmC;AAEpDC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFoC;AAGpDC,gBAAAA,YAAY,EAAEV,iBAAiB,iCAC1BM,OAD0B;AAE7BK,kBAAAA,IAAI,EAAEN,MAAM,CAACO,QAAP;AAFuB,mBAHqB;AAOpDC,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPmC,eAA7B,CAD3B;;AAAA;AAAA;AAAA,mCASMC,IATN;;AAAA;AACQC,cAAAA,GADR;AAAA,+CAWS,CAACA,GAAG,CAACC,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB;AAAC;AAA+BC,cAAAA,CAAhC;AAAA,uBAAsCpB,GAAG,CAACqB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAAtC;AAAA,eAArB,CAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAiBhC,SAAOd,eAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n"]},"metadata":{},"sourceType":"script"}