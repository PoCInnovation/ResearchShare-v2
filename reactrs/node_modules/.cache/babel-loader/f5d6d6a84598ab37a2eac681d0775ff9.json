{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar configure = require('./lib/configure');\n\nvar multipartRequest = require('./lib/multipart-request');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar abortSignal = require('./lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _yield$_awaitAsyncGen,\n          headers,\n          body,\n          total,\n          parts,\n          _ref,\n          _ref2,\n          progressFn,\n          onUploadProgress,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          file,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              // In browser response body only starts streaming once upload is\n              // complete, at which point all the progress updates are invalid. If\n              // length of the content is computable we can interpret progress from\n              // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n              // in which case we disable progress updates to be written out.\n              _ref = typeof options.progress === 'function' // @ts-ignore tsc picks up the node codepath\n              ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 13;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                timeout: options.timeout,\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n\n            case 13:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 20:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 24;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 24:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 37;\n                break;\n              }\n\n              file = _value;\n              file = toCamel(file);\n\n              if (!(file.hash !== undefined)) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.next = 31;\n              return toCoreInterface(file);\n\n            case 31:\n              _context.next = 34;\n              break;\n\n            case 33:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n\n            case 34:\n              _iteratorNormalCompletion = true;\n              _context.next = 18;\n              break;\n\n            case 37:\n              _context.next = 43;\n              break;\n\n            case 39:\n              _context.prev = 39;\n              _context.t0 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 43:\n              _context.prev = 43;\n              _context.prev = 44;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 48;\n                break;\n              }\n\n              _context.next = 48;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 48:\n              _context.prev = 48;\n\n              if (!_didIteratorError) {\n                _context.next = 51;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 51:\n              return _context.finish(48);\n\n            case 52:\n              return _context.finish(43);\n\n            case 53:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 39, 43, 53], [44,, 48, 52]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\n\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\n\n\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n        total = _ref3.total;\n    // Derive position from the current progress.\n    var position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      var _parts$index = parts[index],\n          start = _parts$index.start,\n          end = _parts$index.end,\n          name = _parts$index.name; // If within current part range report progress and break the loop\n\n      if (position < end) {\n        progress(position - start, name);\n        break; // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\n\n\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n      hash = _ref4.hash,\n      size = _ref4.size,\n      mode = _ref4.mode,\n      mtime = _ref4.mtime,\n      mtimeNsecs = _ref4.mtimeNsecs;\n\n  /** @type {AddResult} */\n  var output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/add-all.js"],"names":["require","CID","toCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","addAll","source","options","controller","signal","headers","body","total","parts","progress","createProgressHandler","undefined","progressFn","onUploadProgress","post","searchParams","Boolean","timeout","res","ndjson","file","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst abortSignal = require('./lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nmodule.exports = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      // @ts-ignore tsc picks up the node codepath\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}