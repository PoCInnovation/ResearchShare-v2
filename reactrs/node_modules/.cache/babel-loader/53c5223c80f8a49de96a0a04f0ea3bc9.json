{"ast":null,"code":"'use strict';\n\nvar bases = require('./util/bases');\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\n\n\nfunction fromString(string) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  var base = bases[encoding];\n\n  if (!base) {\n    throw new Error(\"Unsupported encoding \\\"\".concat(encoding, \"\\\"\"));\n  } // add multibase prefix\n\n\n  return base.decoder.decode(\"\".concat(base.prefix).concat(string));\n}\n\nmodule.exports = fromString;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/uint8arrays/from-string.js"],"names":["bases","require","fromString","string","encoding","base","Error","decoder","decode","prefix","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBC,MAArB,EAAgD;AAAA,MAAnBC,QAAmB,uEAAR,MAAQ;AAC9C,MAAMC,IAAI,GAAGL,KAAK,CAACI,QAAD,CAAlB;;AAEA,MAAI,CAACC,IAAL,EAAW;AACT,UAAM,IAAIC,KAAJ,kCAAmCF,QAAnC,QAAN;AACD,GAL6C,CAO9C;;;AACA,SAAOC,IAAI,CAACE,OAAL,CAAaC,MAAb,WAAuBH,IAAI,CAACI,MAA5B,SAAqCN,MAArC,EAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`)\n}\n\nmodule.exports = fromString\n"]},"metadata":{},"sourceType":"script"}