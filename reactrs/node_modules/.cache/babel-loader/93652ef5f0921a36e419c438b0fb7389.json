{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nvar SubscriptionTracker = require('./subscription-tracker');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api, options) {\n  var subsTracker = SubscriptionTracker.singleton();\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, handler) {\n      var options,\n          done,\n          fail,\n          result,\n          ffWorkaround,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n              // eslint-disable-line require-await\n              options.signal = subsTracker.subscribe(topic, handler, options.signal);\n              result = new Promise(function (resolve, reject) {\n                done = resolve;\n                fail = reject;\n              }); // In Firefox, the initial call to fetch does not resolve until some data\n              // is received. If this doesn't happen within 1 second assume success\n\n              ffWorkaround = setTimeout(function () {\n                return done();\n              }, 1000); // Do this async to not block Firefox\n\n              setTimeout(function () {\n                api.post('pubsub/sub', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  searchParams: toUrlSearchParams(_objectSpread({\n                    arg: topic\n                  }, options)),\n                  headers: options.headers\n                }).catch(function (err) {\n                  // Initial subscribe fail, ensure we clean up\n                  subsTracker.unsubscribe(topic, handler);\n                  fail(err);\n                }).then(function (response) {\n                  clearTimeout(ffWorkaround);\n\n                  if (!response) {\n                    // if there was no response, the subscribe failed\n                    return;\n                  }\n\n                  readMessages(response.ndjson(), {\n                    onMessage: handler,\n                    onEnd: function onEnd() {\n                      return subsTracker.unsubscribe(topic, handler);\n                    },\n                    onError: options.onError\n                  });\n                  done();\n                });\n              }, 0);\n              return _context2.abrupt(\"return\", result);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n});\n\nfunction readMessages(msgStream, _ref) {\n  var onMessage = _ref.onMessage,\n      onEnd = _ref.onEnd,\n      onError = _ref.onError;\n\n  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n  return _regeneratorRuntime.async(function readMessages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          onError = onError || log;\n          _context.prev = 1;\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 4;\n          _iterator = _asyncIterator(msgStream);\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 8:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 12:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 28;\n            break;\n          }\n\n          msg = _value;\n          _context.prev = 15;\n\n          if (msg.from) {\n            _context.next = 18;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 25);\n\n        case 18:\n          onMessage({\n            from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n            data: uint8ArrayFromString(msg.data, 'base64pad'),\n            seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n            topicIDs: msg.topicIDs\n          });\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](15);\n          _context.t0.message = \"Failed to parse pubsub message: \".concat(_context.t0.message);\n          onError(_context.t0, false, msg); // Not fatal\n\n        case 25:\n          _iteratorNormalCompletion = true;\n          _context.next = 6;\n          break;\n\n        case 28:\n          _context.next = 34;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t1 = _context[\"catch\"](4);\n          _didIteratorError = true;\n          _iteratorError = _context.t1;\n\n        case 34:\n          _context.prev = 34;\n          _context.prev = 35;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 39;\n            break;\n          }\n\n          _context.next = 39;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 39:\n          _context.prev = 39;\n\n          if (!_didIteratorError) {\n            _context.next = 42;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 42:\n          return _context.finish(39);\n\n        case 43:\n          return _context.finish(34);\n\n        case 44:\n          _context.next = 49;\n          break;\n\n        case 46:\n          _context.prev = 46;\n          _context.t2 = _context[\"catch\"](1);\n\n          // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n          // Temporarily use the name property instead.\n          if (_context.t2.type !== 'aborted' && _context.t2.name !== 'AbortError') {\n            onError(_context.t2, true); // Fatal\n          }\n\n        case 49:\n          _context.prev = 49;\n          onEnd();\n          return _context.finish(49);\n\n        case 52:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 46, 49, 52], [4, 30, 34, 44], [15, 21], [35,, 39, 43]], Promise);\n}","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["uint8ArrayFromString","require","uint8ArrayToString","log","SubscriptionTracker","configure","toUrlSearchParams","module","exports","api","options","subsTracker","singleton","topic","handler","signal","subscribe","result","Promise","resolve","reject","done","fail","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","ndjson","onMessage","onEnd","onError","msgStream","msg","from","data","seqno","topicIDs","message","type","name"],"mappings":"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","sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst SubscriptionTracker = require('./subscription-tracker')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton()\n\n  return async (topic, handler, options = {}) => { // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n    let done\n    let fail\n\n    const result = new Promise((resolve, reject) => {\n      done = resolve\n      fail = reject\n    })\n\n    // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n    const ffWorkaround = setTimeout(() => done(), 1000)\n\n    // Do this async to not block Firefox\n    setTimeout(() => {\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response.ndjson(), {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n    }, 0)\n\n    return result\n  }\n})\n\nasync function readMessages (msgStream, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of msgStream) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n    // Temporarily use the name property instead.\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}