{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require2 = require('any-signal'),\n    anySignal = _require2.anySignal;\n\nvar AbortController = require('native-abort-controller');\n\nvar unit8ArrayToString = require('uint8arrays/to-string');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj) {\n      var options,\n          tmpObj,\n          buf,\n          controller,\n          signal,\n          res,\n          _yield$res$json,\n          Hash,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              tmpObj = {\n                Data: null,\n                Links: []\n              };\n\n              if (!(obj instanceof Uint8Array)) {\n                _context.next = 6;\n                break;\n              }\n\n              if (!options.enc) {\n                tmpObj = {\n                  Data: unit8ArrayToString(obj),\n                  Links: []\n                };\n              }\n\n              _context.next = 16;\n              break;\n\n            case 6:\n              if (!DAGNode.isDAGNode(obj)) {\n                _context.next = 10;\n                break;\n              }\n\n              tmpObj = {\n                Data: unit8ArrayToString(obj.Data),\n                Links: obj.Links.map(function (l) {\n                  return {\n                    Name: l.Name,\n                    Hash: l.Hash.toString(),\n                    Size: l.Tsize\n                  };\n                })\n              };\n              _context.next = 16;\n              break;\n\n            case 10:\n              if (!(typeof obj === 'object')) {\n                _context.next = 15;\n                break;\n              }\n\n              tmpObj.Data = unit8ArrayToString(obj.Data);\n              tmpObj.Links = obj.Links;\n              _context.next = 16;\n              break;\n\n            case 15:\n              throw new Error('obj not recognized');\n\n            case 16:\n              if (obj instanceof Uint8Array && options.enc) {\n                buf = obj;\n              } else {\n                options.enc = 'json';\n                buf = uint8ArrayFromString(JSON.stringify(tmpObj));\n              } // allow aborting requests on body errors\n\n\n              controller = new AbortController();\n              signal = anySignal([controller.signal, options.signal]);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 24;\n              return multipartRequest(buf, controller, options.headers);\n\n            case 24:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 28;\n              return _context.t0.post.call(_context.t0, 'object/put', _context.t4);\n\n            case 28:\n              res = _context.sent;\n              _context.next = 31;\n              return res.json();\n\n            case 31:\n              _yield$res$json = _context.sent;\n              Hash = _yield$res$json.Hash;\n              return _context.abrupt(\"return\", new CID(Hash));\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/object/put.js"],"names":["CID","require","DAGNode","multipartRequest","configure","toUrlSearchParams","anySignal","AbortController","unit8ArrayToString","uint8ArrayFromString","module","exports","api","obj","options","tmpObj","Data","Links","Uint8Array","enc","isDAGNode","map","l","Name","Hash","toString","Size","Tsize","Error","buf","JSON","stringify","controller","signal","timeout","searchParams","headers","post","res","json"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\nconst unit8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  return async (obj, options = {}) => {\n    let tmpObj = {\n      Data: null,\n      Links: []\n    }\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: unit8ArrayToString(obj),\n          Links: []\n        }\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: unit8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      }\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = unit8ArrayToString(obj.Data)\n      tmpObj.Links = obj.Links\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    let buf\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj\n    } else {\n      options.enc = 'json'\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj))\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(buf, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}