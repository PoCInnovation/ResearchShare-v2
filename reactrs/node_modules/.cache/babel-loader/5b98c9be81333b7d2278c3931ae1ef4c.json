{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar LOAD_HASHER = function LOAD_HASHER(codeOrName) {\n  return Promise.reject(new Error(\"No hasher found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\n\nvar Multihashes = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  function Multihashes(options) {\n    _classCallCheck(this, Multihashes);\n\n    // Object with current list of active hashers\n\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}; // Object with current list of active hashers\n\n    /** @type {Record<number, MultihashHasher>}} */\n\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER; // Enable all supplied hashers\n\n    var _iterator = _createForOfIteratorHelper(options.hashers),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var hasher = _step.value;\n        this.addHasher(hasher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n\n\n  _createClass(Multihashes, [{\n    key: \"addHasher\",\n    value: function addHasher(hasher) {\n      if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(hasher.name, \"\\\"\"));\n      }\n\n      this._hashersByName[hasher.name] = hasher;\n      this._hashersByCode[hasher.code] = hasher;\n    }\n    /**\n     * Remove support for a multibase hasher\n     *\n     * @param {MultihashHasher} hasher\n     */\n\n  }, {\n    key: \"removeHasher\",\n    value: function removeHasher(hasher) {\n      delete this._hashersByName[hasher.name];\n      delete this._hashersByCode[hasher.code];\n    }\n    /**\n     * @param {number | string} code\n     */\n\n  }, {\n    key: \"getHasher\",\n    value: function () {\n      var _getHasher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(code) {\n        var table, hasher;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n\n                if (!table[code]) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", table[code]);\n\n              case 3:\n                _context.next = 5;\n                return this._loadHasher(code);\n\n              case 5:\n                hasher = _context.sent;\n\n                if (table[code] == null) {\n                  this.addHasher(hasher);\n                }\n\n                return _context.abrupt(\"return\", hasher);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getHasher(_x) {\n        return _getHasher.apply(this, arguments);\n      }\n\n      return getHasher;\n    }()\n  }, {\n    key: \"listHashers\",\n    value: function listHashers() {\n      return Object.values(this._hashersByName);\n    }\n  }]);\n\n  return Multihashes;\n}();\n\nmodule.exports = Multihashes;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-core-utils/src/multihashes.js"],"names":["LOAD_HASHER","codeOrName","Promise","reject","Error","Multihashes","options","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hashers","hasher","addHasher","name","code","table","Object","values","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AACA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD;AAAA,SAAgBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,iCAAkCH,UAAlC,QAAf,CAAhB;AAAA,CAApB;;IAEMI,W;AACJ;AACF;AACA;AACA;AACA;AACE,uBAAaC,OAAb,EAAsB;AAAA;;AACpB;;AACA;AACA,SAAKC,cAAL,GAAsB,EAAtB,CAHoB,CAKpB;;AACA;;AACA,SAAKC,cAAL,GAAsB,EAAtB;AAEA,SAAKC,WAAL,GAAmBH,OAAO,CAACI,UAAR,IAAsBV,WAAzC,CAToB,CAWpB;;AAXoB,+CAYCM,OAAO,CAACK,OAZT;AAAA;;AAAA;AAYpB,0DAAsC;AAAA,YAA3BC,MAA2B;AACpC,aAAKC,SAAL,CAAeD,MAAf;AACD;AAdmB;AAAA;AAAA;AAAA;AAAA;AAerB;AAED;AACF;AACA;AACA;AACA;;;;;WACE,mBAAWA,MAAX,EAAmB;AACjB,UAAI,KAAKL,cAAL,CAAoBK,MAAM,CAACE,IAA3B,KAAoC,KAAKN,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAxC,EAA0E;AACxE,cAAM,IAAIX,KAAJ,+CAAgDQ,MAAM,CAACE,IAAvD,QAAN;AACD;;AAED,WAAKP,cAAL,CAAoBK,MAAM,CAACE,IAA3B,IAAmCF,MAAnC;AACA,WAAKJ,cAAL,CAAoBI,MAAM,CAACG,IAA3B,IAAmCH,MAAnC;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,sBAAcA,MAAd,EAAsB;AACpB,aAAO,KAAKL,cAAL,CAAoBK,MAAM,CAACE,IAA3B,CAAP;AACA,aAAO,KAAKN,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAP;AACD;AAED;AACF;AACA;;;;;gFACE,iBAAiBA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,KADR,GACgB,OAAOD,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,cAAhC,GAAiD,KAAKC,cADtE;;AAAA,qBAGMQ,KAAK,CAACD,IAAD,CAHX;AAAA;AAAA;AAAA;;AAAA,iDAIWC,KAAK,CAACD,IAAD,CAJhB;;AAAA;AAAA;AAAA,uBAQuB,KAAKN,WAAL,CAAiBM,IAAjB,CARvB;;AAAA;AAQQH,gBAAAA,MARR;;AAUE,oBAAII,KAAK,CAACD,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,uBAAKF,SAAL,CAAeD,MAAf;AACD;;AAZH,iDAcSA,MAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAiBA,uBAAe;AACb,aAAOK,MAAM,CAACC,MAAP,CAAc,KAAKX,cAAnB,CAAP;AACD;;;;;;AAGHY,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["'use strict'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nclass Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n\nmodule.exports = Multihashes\n"]},"metadata":{},"sourceType":"script"}