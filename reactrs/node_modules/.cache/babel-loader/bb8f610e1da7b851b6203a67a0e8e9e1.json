{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require2 = require('./response-types'),\n    FinalPeer = _require2.FinalPeer;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  function findPeer(_x) {\n    return _findPeer.apply(this, arguments);\n  }\n\n  function _findPeer() {\n    _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          data,\n          _data$Responses$,\n          ID,\n          Addrs,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('dht/findpeer', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: peerId\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _iterator.next();\n\n            case 10:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 14;\n              return _step.value;\n\n            case 14:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 23;\n                break;\n              }\n\n              data = _value;\n\n              if (!(data.Type === FinalPeer && data.Responses)) {\n                _context.next = 20;\n                break;\n              }\n\n              _data$Responses$ = data.Responses[0], ID = _data$Responses$.ID, Addrs = _data$Responses$.Addrs;\n              return _context.abrupt(\"return\", {\n                id: ID,\n                addrs: (Addrs || []).map(function (\n                /** @type {string} **/\n                a) {\n                  return new Multiaddr(a);\n                })\n              });\n\n            case 20:\n              _iteratorNormalCompletion = true;\n              _context.next = 8;\n              break;\n\n            case 23:\n              _context.next = 29;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 29:\n              _context.prev = 29;\n              _context.prev = 30;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 34;\n                break;\n              }\n\n              _context.next = 34;\n              return _iterator.return();\n\n            case 34:\n              _context.prev = 34;\n\n              if (!_didIteratorError) {\n                _context.next = 37;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 37:\n              return _context.finish(34);\n\n            case 38:\n              return _context.finish(29);\n\n            case 39:\n              throw new Error('not found');\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 25, 29, 39], [30,, 34, 38]]);\n    }));\n    return _findPeer.apply(this, arguments);\n  }\n\n  return findPeer;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dht/find-peer.js"],"names":["require","Multiaddr","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","post","timeout","signal","searchParams","arg","headers","res","ndjson","data","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"mappings":"AAAA;;;;;;;;;;eAEsBA,OAAO,CAAC,WAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;gBACsBA,OAAO,CAAC,kBAAD,C;IAArBI,S,aAAAA,S;AAER;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,QAJiB;AAAA;AAAA;;AAAA;AAAA,yEAIhC,iBAAyBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiCC,cAAAA,OAAjC,2DAA2C,EAA3C;AAAA;AAAA,qBACoBH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADwB;AAEzCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFyB;AAGzCC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAEN;AADwB,mBAE1BC,OAF0B,EAHU;AAOzCM,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AAPwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA;AAAA;AAAA,yCAW2BA,GAAG,CAACC,MAAJ,EAX3B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWmBC,cAAAA,IAXnB;;AAAA,oBAYQA,IAAI,CAACC,IAAL,KAAchB,SAAd,IAA2Be,IAAI,CAACE,SAZxC;AAAA;AAAA;AAAA;;AAAA,iCAa4BF,IAAI,CAACE,SAAL,CAAe,CAAf,CAb5B,EAacC,EAbd,oBAacA,EAbd,EAakBC,KAblB,oBAakBA,KAblB;AAAA,+CAca;AACLC,gBAAAA,EAAE,EAAEF,EADC;AAELG,gBAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;AAAC;AAAuBC,gBAAAA,CAAxB;AAAA,yBAA8B,IAAI1B,SAAJ,CAAc0B,CAAd,CAA9B;AAAA,iBAAlB;AAFF,eAdb;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,oBAqBQ,IAAIC,KAAJ,CAAU,WAAV,CArBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA4BhC,SAAOpB,QAAP;AACD,CA7ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"]},"metadata":{},"sourceType":"script"}