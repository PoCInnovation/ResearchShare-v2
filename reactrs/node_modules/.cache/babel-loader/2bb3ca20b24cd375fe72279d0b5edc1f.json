{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  function provide(_x) {\n    return _provide.apply(this, arguments);\n  }\n\n  function _provide() {\n    _provide = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cids) {\n      var options,\n          cidArr,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {\n                recursive: false\n              };\n\n              /** @type {CID[]} */\n              cidArr = Array.isArray(cids) ? cids : [cids];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('dht/provide', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cidArr.map(function (cid) {\n                    return cid.toString();\n                  })\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 4:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 15;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 15:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 25;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n\n              if (message.responses) {\n                message.responses = message.responses.map(function (\n                /** @type {{ ID: string, Addrs: string[] }} */\n                _ref) {\n                  var ID = _ref.ID,\n                      Addrs = _ref.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (\n                    /** @type {string} **/\n                    a) {\n                      return new Multiaddr(a);\n                    })\n                  };\n                });\n              } else {\n                message.responses = [];\n              }\n\n              _context.next = 22;\n              return message;\n\n            case 22:\n              _iteratorNormalCompletion = true;\n              _context.next = 9;\n              break;\n\n            case 25:\n              _context.next = 31;\n              break;\n\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 31:\n              _context.prev = 31;\n              _context.prev = 32;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 36;\n                break;\n              }\n\n              _context.next = 36;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 36:\n              _context.prev = 36;\n\n              if (!_didIteratorError) {\n                _context.next = 39;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 39:\n              return _context.finish(36);\n\n            case 40:\n              return _context.finish(31);\n\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 27, 31, 41], [32,, 36, 40]]);\n    }));\n    return _provide.apply(this, arguments);\n  }\n\n  return provide;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dht/provide.js"],"names":["require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","recursive","cidArr","Array","isArray","post","timeout","signal","searchParams","arg","map","cid","toString","headers","res","ndjson","message","responses","ID","Addrs","id","addrs","a"],"mappings":"AAAA;;;;;;;;;;;;eAEsBA,OAAO,CAAC,WAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,OAJe;AAAA;AAAA;;AAAA;AAAA,0EAIhC,iBAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAgCC,cAAAA,OAAhC,2DAA0C;AAAEC,gBAAAA,SAAS,EAAE;AAAb,eAA1C;;AACE;AACMC,cAAAA,MAFR,GAEiBC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAF9C;AAAA;AAAA,0CAIoBF,GAAG,CAACQ,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,OAAO,EAAEN,OAAO,CAACM,OADuB;AAExCC,gBAAAA,MAAM,EAAEP,OAAO,CAACO,MAFwB;AAGxCC,gBAAAA,YAAY,EAAEd,iBAAiB;AAC7Be,kBAAAA,GAAG,EAAEP,MAAM,CAACQ,GAAP,CAAW,UAAAC,GAAG;AAAA,2BAAIA,GAAG,CAACC,QAAJ,EAAJ;AAAA,mBAAd;AADwB,mBAE1BZ,OAF0B,EAHS;AAOxCa,gBAAAA,OAAO,EAAEb,OAAO,CAACa;AAPuB,eAAxB,CAJpB;;AAAA;AAIQC,cAAAA,GAJR;AAAA;AAAA;AAAA;AAAA,yCAc4BA,GAAG,CAACC,MAAJ,EAd5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAciBC,cAAAA,OAdjB;AAeIA,cAAAA,OAAO,GAAGxB,OAAO,CAACwB,OAAD,CAAjB;;AACA,kBAAIA,OAAO,CAACC,SAAZ,EAAuB;AACrBD,gBAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,CAAkBP,GAAlB,CAAsB;AAAC;AAAD;AAAA,sBAAkDQ,EAAlD,QAAkDA,EAAlD;AAAA,sBAAsDC,KAAtD,QAAsDA,KAAtD;AAAA,yBAAmE;AAC3GC,oBAAAA,EAAE,EAAEF,EADuG;AAE3GG,oBAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcT,GAAd,CAAkB;AAAC;AAAuBY,oBAAAA,CAAxB;AAAA,6BAA8B,IAAI/B,SAAJ,CAAc+B,CAAd,CAA9B;AAAA,qBAAlB;AAFoG,mBAAnE;AAAA,iBAAtB,CAApB;AAID,eALD,MAKO;AACLN,gBAAAA,OAAO,CAACC,SAAR,GAAoB,EAApB;AACD;;AAvBL;AAwBI,qBAAMD,OAAN;;AAxBJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAgChC,SAAOlB,OAAP;AACD,CAjCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"]},"metadata":{},"sourceType":"script"}