{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar itPeekable = require('it-peekable');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar all = require('it-all');\n\nvar _require = require('./utils'),\n    isBytes = _require.isBytes,\n    isBlob = _require.isBlob,\n    isReadableStream = _require.isReadableStream;\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nfunction toBlob(_x) {\n  return _toBlob.apply(this, arguments);\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\n\n\nfunction _toBlob() {\n  _toBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var peekable, _yield$peekable$peek, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isBytes(input)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", new Blob([input]));\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", new Blob([input.toString()]));\n\n          case 4:\n            if (!isBlob(input)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", input);\n\n          case 6:\n            // Browser stream\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            } // (Async)Iterator<?>\n\n\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context2.next = 28;\n              break;\n            }\n\n            /** @type {any} peekable */\n            peekable = itPeekable(input);\n            /** @type {any} value **/\n\n            _context2.next = 11;\n            return peekable.peek();\n\n          case 11:\n            _yield$peekable$peek = _context2.sent;\n            value = _yield$peekable$peek.value;\n            done = _yield$peekable$peek.done;\n\n            if (!done) {\n              _context2.next = 16;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", itToBlob(peekable));\n\n          case 16:\n            peekable.push(value); // (Async)Iterable<Number>\n\n            if (!Number.isInteger(value)) {\n              _context2.next = 26;\n              break;\n            }\n\n            _context2.t0 = Blob;\n            _context2.t1 = Uint8Array;\n            _context2.next = 22;\n            return all(peekable);\n\n          case 22:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = _context2.t1.from.call(_context2.t1, _context2.t2);\n            _context2.t4 = [_context2.t3];\n            return _context2.abrupt(\"return\", new _context2.t0(_context2.t4));\n\n          case 26:\n            if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context2.next = 28;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", itToBlob(peekable));\n\n          case 28:\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toBlob.apply(this, arguments);\n}\n\nfunction itToBlob(stream) {\n  var parts, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n  return _regeneratorRuntime.async(function itToBlob$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parts = [];\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 3;\n          _iterator = _asyncIterator(stream);\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 7:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 11:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 18;\n            break;\n          }\n\n          chunk = _value;\n          parts.push(chunk);\n\n        case 15:\n          _iteratorNormalCompletion = true;\n          _context.next = 5;\n          break;\n\n        case 18:\n          _context.next = 24;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 24:\n          _context.prev = 24;\n          _context.prev = 25;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 29;\n            break;\n          }\n\n          _context.next = 29;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 29:\n          _context.prev = 29;\n\n          if (!_didIteratorError) {\n            _context.next = 32;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 32:\n          return _context.finish(29);\n\n        case 33:\n          return _context.finish(24);\n\n        case 34:\n          return _context.abrupt(\"return\", new Blob(parts));\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 20, 24, 34], [25,, 29, 33]], Promise);\n}\n\nmodule.exports = toBlob;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.browser.js"],"names":["errCode","require","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","toBlob","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst itPeekable = require('it-peekable')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst all = require('it-all')\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils')\n\n/**\n * @param {import('./normalise-input').ToContent} input\n */\nasync function toBlob (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n\nmodule.exports = toBlob\n"]},"metadata":{},"sourceType":"script"}