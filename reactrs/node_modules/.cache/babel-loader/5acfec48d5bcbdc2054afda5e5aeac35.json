{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require = require('./response-types'),\n    Value = _require.Value;\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').ImplementsMethod<'get', import('ipfs-core/src/components/dht')>}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('dht/get', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _iterator.next();\n\n            case 10:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 14;\n              return _step.value;\n\n            case 14:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 22;\n                break;\n              }\n\n              message = _value;\n\n              if (!(message.Type === Value)) {\n                _context.next = 19;\n                break;\n              }\n\n              return _context.abrupt(\"return\", uint8ArrayFromString(message.Extra, 'base64pad'));\n\n            case 19:\n              _iteratorNormalCompletion = true;\n              _context.next = 8;\n              break;\n\n            case 22:\n              _context.next = 28;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 28:\n              _context.prev = 28;\n              _context.prev = 29;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.next = 33;\n              return _iterator.return();\n\n            case 33:\n              _context.prev = 33;\n\n              if (!_didIteratorError) {\n                _context.next = 36;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 36:\n              return _context.finish(33);\n\n            case 37:\n              return _context.finish(28);\n\n            case 38:\n              throw new Error('not found');\n\n            case 39:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 24, 28, 38], [29,, 33, 37]]);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/dht/get.js"],"names":["configure","require","toUrlSearchParams","Value","uint8ArrayToString","uint8ArrayFromString","module","exports","api","get","key","options","post","timeout","signal","searchParams","arg","Uint8Array","headers","res","ndjson","message","Type","Extra","Error"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;eACkBA,OAAO,CAAC,kBAAD,C;IAAjBE,K,YAAAA,K;;AACR,IAAMC,kBAAkB,GAAGH,OAAO,CAAC,uBAAD,CAAlC;;AACA,IAAMI,oBAAoB,GAAGJ,OAAO,CAAC,yBAAD,CAApC;;AAEAK,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAAC,UAAAQ,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,oEAIhC,iBAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyBC,cAAAA,OAAzB,2DAAmC,EAAnC;AAAA;AAAA,qBACoBH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADmB;AAEpCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFoB;AAGpCC,gBAAAA,YAAY,EAAEb,iBAAiB;AAC7Bc,kBAAAA,GAAG,EAAEN,GAAG,YAAYO,UAAf,GAA4Bb,kBAAkB,CAACM,GAAD,CAA9C,GAAsDA;AAD9B,mBAE1BC,OAF0B,EAHK;AAOpCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPmB,eAApB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA;AAAA;AAAA,yCAW8BA,GAAG,CAACC,MAAJ,EAX9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAWmBC,cAAAA,OAXnB;;AAAA,oBAYQA,OAAO,CAACC,IAAR,KAAiBnB,KAZzB;AAAA;AAAA;AAAA;;AAAA,+CAaaE,oBAAoB,CAACgB,OAAO,CAACE,KAAT,EAAgB,WAAhB,CAbjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,oBAiBQ,IAAIC,KAAJ,CAAU,WAAV,CAjBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAwBhC,SAAOf,GAAP;AACD,CAzByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Value } = require('./response-types')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'get', import('ipfs-core/src/components/dht')>}\n   */\n  async function get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad')\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}