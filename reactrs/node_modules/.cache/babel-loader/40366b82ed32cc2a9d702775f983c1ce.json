{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar modeToString = require('./mode-to-string');\n\nvar _require = require('ipfs-core-utils/src/files/normalise-input/utils'),\n    mtimeToObject = _require.mtimeToObject;\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\n\n\nmodule.exports = function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      arg = _ref.arg,\n      searchParams = _ref.searchParams,\n      hashAlg = _ref.hashAlg,\n      mtime = _ref.mtime,\n      mode = _ref.mode,\n      options = _objectWithoutProperties(_ref, [\"arg\", \"searchParams\", \"hashAlg\", \"mtime\", \"mode\"]);\n\n  if (searchParams) {\n    options = _objectSpread(_objectSpread({}, options), searchParams);\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg;\n  }\n\n  if (mtime != null) {\n    mtime = mtimeToObject(mtime);\n    options.mtime = mtime.secs;\n    options.mtimeNsecs = mtime.nsecs;\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode);\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = \"\".concat(options.timeout, \"ms\");\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = [];\n  } else if (!Array.isArray(arg)) {\n    arg = [arg];\n  }\n\n  var urlSearchParams = new URLSearchParams(options);\n  arg.forEach(function (arg) {\n    return urlSearchParams.append('arg', arg);\n  });\n  return urlSearchParams;\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/lib/to-url-search-params.js"],"names":["modeToString","require","mtimeToObject","module","exports","arg","searchParams","hashAlg","mtime","mode","options","hash","secs","mtimeNsecs","nsecs","timeout","isNaN","undefined","Array","isArray","urlSearchParams","URLSearchParams","forEach","append"],"mappings":"AAAA;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;eAC0BA,OAAO,CAAC,iDAAD,C;IAAzBC,a,YAAAA,a;AAER;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAAkE;AAAA,iFAAP,EAAO;AAAA,MAA/DC,GAA+D,QAA/DA,GAA+D;AAAA,MAA1DC,YAA0D,QAA1DA,YAA0D;AAAA,MAA5CC,OAA4C,QAA5CA,OAA4C;AAAA,MAAnCC,KAAmC,QAAnCA,KAAmC;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAnBC,OAAmB;;AACjF,MAAIJ,YAAJ,EAAkB;AAChBI,IAAAA,OAAO,mCACFA,OADE,GAEFJ,YAFE,CAAP;AAID;;AAED,MAAIC,OAAJ,EAAa;AACXG,IAAAA,OAAO,CAACC,IAAR,GAAeJ,OAAf;AACD;;AAED,MAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,IAAAA,KAAK,GAAGN,aAAa,CAACM,KAAD,CAArB;AAEAE,IAAAA,OAAO,CAACF,KAAR,GAAgBA,KAAK,CAACI,IAAtB;AACAF,IAAAA,OAAO,CAACG,UAAR,GAAqBL,KAAK,CAACM,KAA3B;AACD;;AAED,MAAIL,IAAI,IAAI,IAAZ,EAAkB;AAChBC,IAAAA,OAAO,CAACD,IAAR,GAAeT,YAAY,CAACS,IAAD,CAA3B;AACD;;AAED,MAAIC,OAAO,CAACK,OAAR,IAAmB,CAACC,KAAK,CAACN,OAAO,CAACK,OAAT,CAA7B,EAAgD;AAC9C;AACAL,IAAAA,OAAO,CAACK,OAAR,aAAqBL,OAAO,CAACK,OAA7B;AACD;;AAED,MAAIV,GAAG,KAAKY,SAAR,IAAqBZ,GAAG,KAAK,IAAjC,EAAuC;AACrCA,IAAAA,GAAG,GAAG,EAAN;AACD,GAFD,MAEO,IAAI,CAACa,KAAK,CAACC,OAAN,CAAcd,GAAd,CAAL,EAAyB;AAC9BA,IAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAED,MAAMe,eAAe,GAAG,IAAIC,eAAJ,CAAoBX,OAApB,CAAxB;AAEAL,EAAAA,GAAG,CAACiB,OAAJ,CAAY,UAAAjB,GAAG;AAAA,WAAIe,eAAe,CAACG,MAAhB,CAAuB,KAAvB,EAA8BlB,GAA9B,CAAJ;AAAA,GAAf;AAEA,SAAOe,eAAP;AACD,CAvCD","sourcesContent":["'use strict'\n\nconst modeToString = require('./mode-to-string')\nconst { mtimeToObject } = require('ipfs-core-utils/src/files/normalise-input/utils')\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nmodule.exports = ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) => {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = mtimeToObject(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach(arg => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n"]},"metadata":{},"sourceType":"script"}