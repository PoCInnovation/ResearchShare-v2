{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var options,\n          controller,\n          signal,\n          res,\n          response,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.prev = 3;\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 9;\n              return multipartRequest(data, controller, options.headers);\n\n            case 9:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 13;\n              return _context.t0.post.call(_context.t0, 'block/put', _context.t4);\n\n            case 13:\n              response = _context.sent;\n              _context.next = 16;\n              return response.json();\n\n            case 16:\n              res = _context.sent;\n              _context.next = 28;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t5 = _context[\"catch\"](3);\n\n              if (!(options.format === 'dag-pb')) {\n                _context.next = 25;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n                format: 'protobuf'\n              })));\n\n            case 25:\n              if (!(options.format === 'dag-cbor')) {\n                _context.next = 27;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n                format: 'cbor'\n              })));\n\n            case 27:\n              throw _context.t5;\n\n            case 28:\n              return _context.abrupt(\"return\", CID.parse(res.Key));\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 19]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/block/put.js"],"names":["require","CID","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","put","data","options","controller","signal","timeout","searchParams","headers","post","response","json","res","format","parse","Key"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;gBAC4BA,OAAO,CAAC,yBAAD,C;IAA3BM,e,aAAAA,e;AAER;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,GAJiB;AAAA;AAAA;;AAAA;AAAA,oEAIhC,iBAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,cAAAA,OAA1B,2DAAoC,EAApC;AACE;AACMC,cAAAA,UAFR,GAEqB,IAAIP,eAAJ,EAFrB;AAGQQ,cAAAA,MAHR,GAGiBT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAH5B;AAAA;AAAA,4BAO2BL,GAP3B;AAAA;AAAA;AAQMM,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OARvB;AASMD,gBAAAA,MAAM,EAAEA,MATd;AAUME,gBAAAA,YAAY,EAAEZ,iBAAiB,CAACQ,OAAD;AAVrC;AAAA;AAAA,qBAYcV,gBAAgB,CAACS,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACK,OAA3B,CAZ9B;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAO+BC,IAP/B,mBAOoC,WAPpC;;AAAA;AAOUC,cAAAA,QAPV;AAAA;AAAA,qBAegBA,QAAQ,CAACC,IAAT,EAfhB;;AAAA;AAeIC,cAAAA,GAfJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,oBAmBQT,OAAO,CAACU,MAAR,KAAmB,QAnB3B;AAAA;AAAA;AAAA;;AAAA,+CAoBaZ,GAAG,CAACC,IAAD,kCAAYC,OAAZ;AAAqBU,gBAAAA,MAAM,EAAE;AAA7B,iBApBhB;;AAAA;AAAA,oBAqBeV,OAAO,CAACU,MAAR,KAAmB,UArBlC;AAAA;AAAA;AAAA;;AAAA,+CAsBaZ,GAAG,CAACC,IAAD,kCAAYC,OAAZ;AAAqBU,gBAAAA,MAAM,EAAE;AAA7B,iBAtBhB;;AAAA;AAAA;;AAAA;AAAA,+CA4BSrB,GAAG,CAACsB,KAAJ,CAAUF,GAAG,CAACG,GAAd,CA5BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAmChC,SAAOd,GAAP;AACD,CApCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n"]},"metadata":{},"sourceType":"script"}