{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar multipartRequest = require('../../lib/multipart-request');\n\nvar configure = require('../../lib/configure');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n\nvar abortSignal = require('../../lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  function appendData(_x, _x2) {\n    return _appendData.apply(this, arguments);\n  }\n\n  function _appendData() {\n    _appendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, data) {\n      var options,\n          controller,\n          signal,\n          res,\n          _yield$res$json,\n          Hash,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid)\n                }, options))\n              };\n              _context.next = 8;\n              return multipartRequest(data, controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'object/patch/append-data', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.json();\n\n            case 15:\n              _yield$res$json = _context.sent;\n              Hash = _yield$res$json.Hash;\n              return _context.abrupt(\"return\", CID.parse(Hash));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _appendData.apply(this, arguments);\n  }\n\n  return appendData;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/object/patch/append-data.js"],"names":["require","CID","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","appendData","cid","data","options","controller","signal","timeout","searchParams","arg","headers","post","res","json","Hash","parse"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,6BAAD,CAAhC;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,gCAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,wBAAD,CAA3B;;gBAC4BA,OAAO,CAAC,yBAAD,C;IAA3BM,e,aAAAA,e;AAER;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,UAJiB;AAAA;AAAA;;AAAA;AAAA,2EAIhC,iBAA2BC,GAA3B,EAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsCC,cAAAA,OAAtC,2DAAgD,EAAhD;AACE;AACMC,cAAAA,UAFR,GAEqB,IAAIR,eAAJ,EAFrB;AAGQS,cAAAA,MAHR,GAGiBV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAH5B;AAAA,4BAKoBN,GALpB;AAAA;AAAA;AAMIO,gBAAAA,OAAO,EAAEH,OAAO,CAACG,OANrB;AAOID,gBAAAA,MAAM,EAANA,MAPJ;AAQIE,gBAAAA,YAAY,EAAEb,iBAAiB;AAC7Bc,kBAAAA,GAAG,YAAKP,GAAL;AAD0B,mBAE1BE,OAF0B;AARnC;AAAA;AAAA,qBAaYX,gBAAgB,CAACU,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACM,OAA3B,CAb5B;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAKwBC,IALxB,mBAK6B,0BAL7B;;AAAA;AAKQC,cAAAA,GALR;AAAA;AAAA,qBAiByBA,GAAG,CAACC,IAAJ,EAjBzB;;AAAA;AAAA;AAiBUC,cAAAA,IAjBV,mBAiBUA,IAjBV;AAAA,+CAmBStB,GAAG,CAACuB,KAAJ,CAAUD,IAAV,CAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAyBhC,SAAOb,UAAP;AACD,CA1ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../../lib/multipart-request')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\nconst abortSignal = require('../../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n"]},"metadata":{},"sourceType":"script"}