{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  function list() {\n    return _list.apply(this, arguments);\n  }\n\n  function _list() {\n    _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _yield$res$json,\n          Peers,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bootstrap/list', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Peers = _yield$res$json.Peers;\n              return _context.abrupt(\"return\", {\n                Peers: Peers.map(function (\n                /** @type {string} */\n                ma) {\n                  return new Multiaddr(ma);\n                })\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _list.apply(this, arguments);\n  }\n\n  return list;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/bootstrap/list.js"],"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","list","options","post","timeout","signal","searchParams","headers","res","json","Peers","map","ma"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;eACsBA,OAAO,CAAC,WAAD,C;IAArBE,S,YAAAA,S;AAER;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAqBC,cAAAA,OAArB,2DAA+B,EAA/B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,gBAAT,EAA2B;AAC3CC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OAD0B;AAE3CC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAF2B;AAG3CC,gBAAAA,YAAY,EAAEV,iBAAiB,CAACM,OAAD,CAHY;AAI3CK,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AAJ0B,eAA3B,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAQ0BA,GAAG,CAACC,IAAJ,EAR1B;;AAAA;AAAA;AAQUC,cAAAA,KARV,mBAQUA,KARV;AAAA,+CAUS;AAAEA,gBAAAA,KAAK,EAAEA,KAAK,CAACC,GAAN,CAAU;AAAC;AAAsBC,gBAAAA,EAAvB;AAAA,yBAA8B,IAAIf,SAAJ,CAAce,EAAd,CAA9B;AAAA,iBAAV;AAAT,eAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAiBhC,SAAOX,IAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return list\n})\n"]},"metadata":{},"sourceType":"script"}