{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar _require2 = require('ipfs-core-utils/src/pins/normalise-input'),\n    normaliseInput = _require2.normaliseInput;\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n\n  function _rmAll() {\n    _rmAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          _value3,\n          path,\n          recursive,\n          searchParams,\n          res,\n          _iteratorNormalCompletion2,\n          _didIteratorError2,\n          _iteratorError2,\n          _iterator2,\n          _step2,\n          _value2,\n          pin,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(normaliseInput(source));\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 11;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 11:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 60;\n                break;\n              }\n\n              _value3 = _value, path = _value3.path, recursive = _value3.recursive;\n              searchParams = new URLSearchParams(options.searchParams);\n              searchParams.append('arg', \"\".concat(path));\n              if (recursive != null) searchParams.set('recursive', String(recursive));\n              _context.next = 19;\n              return _awaitAsyncGenerator(api.post('pin/rm', {\n                timeout: options.timeout,\n                signal: options.signal,\n                headers: options.headers,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: \"\".concat(path),\n                  recursive: recursive\n                }))\n              }));\n\n            case 19:\n              res = _context.sent;\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context.prev = 22;\n              _iterator2 = _asyncIterator(res.ndjson());\n\n            case 24:\n              _context.next = 26;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 26:\n              _step2 = _context.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context.next = 30;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 30:\n              _value2 = _context.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context.next = 41;\n                break;\n              }\n\n              pin = _value2;\n\n              if (!pin.Pins) {\n                _context.next = 36;\n                break;\n              }\n\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pin.Pins.map(function (\n              /** @type {string} */\n              cid) {\n                return CID.parse(cid);\n              })), _awaitAsyncGenerator), \"t0\", 35);\n\n            case 35:\n              return _context.abrupt(\"continue\", 38);\n\n            case 36:\n              _context.next = 38;\n              return CID.parse(pin);\n\n            case 38:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 24;\n              break;\n\n            case 41:\n              _context.next = 47;\n              break;\n\n            case 43:\n              _context.prev = 43;\n              _context.t1 = _context[\"catch\"](22);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n\n            case 47:\n              _context.prev = 47;\n              _context.prev = 48;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context.next = 52;\n                break;\n              }\n\n              _context.next = 52;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 52:\n              _context.prev = 52;\n\n              if (!_didIteratorError2) {\n                _context.next = 55;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 55:\n              return _context.finish(52);\n\n            case 56:\n              return _context.finish(47);\n\n            case 57:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 60:\n              _context.next = 66;\n              break;\n\n            case 62:\n              _context.prev = 62;\n              _context.t2 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n\n            case 66:\n              _context.prev = 66;\n              _context.prev = 67;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 71;\n                break;\n              }\n\n              _context.next = 71;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 71:\n              _context.prev = 71;\n\n              if (!_didIteratorError) {\n                _context.next = 74;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 74:\n              return _context.finish(71);\n\n            case 75:\n              return _context.finish(66);\n\n            case 76:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 62, 66, 76], [22, 43, 47, 57], [48,, 52, 56], [67,, 71, 75]]);\n    }));\n    return _rmAll.apply(this, arguments);\n  }\n\n  return rmAll;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/pin/rm-all.js"],"names":["require","CID","configure","normaliseInput","toUrlSearchParams","module","exports","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","post","timeout","signal","headers","arg","res","ndjson","pin","Pins","map","cid","parse"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"]},"metadata":{},"sourceType":"script"}