{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar resolve = require('../lib/resolve');\n\nvar first = require('it-first');\n\nvar last = require('it-last');\n\nvar errCode = require('err-code');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\n\n\nmodule.exports = function (codecs, options) {\n  var fn = configure(function (api, opts) {\n    var getBlock = require('../block/get')(opts);\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n\n\n    var get = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n        var options,\n            entry,\n            result,\n            codec,\n            block,\n            node,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n                if (!options.path) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!options.localResolve) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return first(resolve(cid, options.path, codecs, getBlock, options));\n\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return last(resolve(cid, options.path, codecs, getBlock, options));\n\n              case 10:\n                _context.t0 = _context.sent;\n\n              case 11:\n                entry = _context.t0;\n\n                /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n                result = entry;\n\n                if (result) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n\n              case 15:\n                return _context.abrupt(\"return\", result);\n\n              case 16:\n                _context.next = 18;\n                return codecs.getCodec(cid.code);\n\n              case 18:\n                codec = _context.sent;\n                _context.next = 21;\n                return getBlock(cid, options);\n\n              case 21:\n                block = _context.sent;\n                node = codec.decode(block);\n                return _context.abrupt(\"return\", {\n                  value: node,\n                  remainderPath: ''\n                });\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function get(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dag/get.js"],"names":["configure","require","resolve","first","last","errCode","module","exports","codecs","options","fn","api","opts","getBlock","get","cid","path","localResolve","entry","result","Error","getCodec","code","codec","block","node","decode","value","remainderPath"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAApB;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,UAACC,MAAD,EAASC,OAAT,EAAqB;AACpC,MAAMC,EAAE,GAAGV,SAAS,CAAC,UAACW,GAAD,EAAMC,IAAN,EAAe;AAClC,QAAMC,QAAQ,GAAGZ,OAAO,CAAC,cAAD,CAAP,CAAwBW,IAAxB,CAAjB;AAEA;AACJ;AACA;;;AACI,QAAME,GAAG;AAAA,0EAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYN,gBAAAA,OAAZ,2DAAsB,EAAtB;;AAAA,qBACNA,OAAO,CAACO,IADF;AAAA;AAAA;AAAA;;AAAA,qBAEMP,OAAO,CAACQ,YAFd;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGEd,KAAK,CAACD,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CAHP;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAIEL,IAAI,CAACF,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CAJN;;AAAA;AAAA;;AAAA;AAEFS,gBAAAA,KAFE;;AAKR;AACMC,gBAAAA,MANE,GAMQD,KANR;;AAAA,oBAQHC,MARG;AAAA;AAAA;AAAA;;AAAA,sBASAd,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CATP;;AAAA;AAAA,iDAYDD,MAZC;;AAAA;AAAA;AAAA,uBAeUX,MAAM,CAACa,QAAP,CAAgBN,GAAG,CAACO,IAApB,CAfV;;AAAA;AAeJC,gBAAAA,KAfI;AAAA;AAAA,uBAgBUV,QAAQ,CAACE,GAAD,EAAMN,OAAN,CAhBlB;;AAAA;AAgBJe,gBAAAA,KAhBI;AAiBJC,gBAAAA,IAjBI,GAiBGF,KAAK,CAACG,MAAN,CAAaF,KAAb,CAjBH;AAAA,iDAmBH;AACLG,kBAAAA,KAAK,EAAEF,IADF;AAELG,kBAAAA,aAAa,EAAE;AAFV,iBAnBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAHd,GAAG;AAAA;AAAA;AAAA,OAAT;;AAyBA,WAAOA,GAAP;AACD,GAhCmB,CAApB;AAkCA,SAAOJ,EAAE,CAACD,OAAD,CAAT;AACD,CApCD","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst resolve = require('../lib/resolve')\nconst first = require('it-first')\nconst last = require('it-last')\nconst errCode = require('err-code')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = require('../block/get')(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n"]},"metadata":{},"sourceType":"script"}