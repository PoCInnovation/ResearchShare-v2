{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar _require = require('ipld-dag-pb'),\n    DAGLink = _require.DAGLink;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('object/links', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid instanceof Uint8Array ? new CID(cid) : cid)\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", (data.Links || []).map(function (l) {\n                return new DAGLink(l.Name, l.Size, l.Hash);\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/object/links.js"],"names":["CID","require","DAGLink","configure","toUrlSearchParams","module","exports","api","cid","options","post","timeout","signal","searchParams","arg","Uint8Array","headers","res","json","data","Links","map","l","Name","Size","Hash"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;eACoBA,OAAO,CAAC,aAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AAAA,wEAAO,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,OAAZ,2DAAsB,EAAtB;AAAA;AAAA,qBACaF,GAAG,CAACG,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADwB;AAEzCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFyB;AAGzCC,gBAAAA,YAAY,EAAET,iBAAiB;AAC7BU,kBAAAA,GAAG,YAAKN,GAAG,YAAYO,UAAf,GAA4B,IAAIf,GAAJ,CAAQQ,GAAR,CAA5B,GAA2CA,GAAhD;AAD0B,mBAE1BC,OAF0B,EAHU;AAOzCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAPwB,eAAzB,CADb;;AAAA;AACCC,cAAAA,GADD;AAAA;AAAA,qBAUcA,GAAG,CAACC,IAAJ,EAVd;;AAAA;AAUCC,cAAAA,IAVD;AAAA,+CAYE,CAACA,IAAI,CAACC,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB,UAAAC,CAAC;AAAA,uBAAI,IAAIpB,OAAJ,CAAYoB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAJ;AAAA,eAAxB,CAZF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAcD,CAfyB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (cid, options = {}) => {\n    const res = await api.post('object/links', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map(l => new DAGLink(l.Name, l.Size, l.Hash))\n  }\n})\n"]},"metadata":{},"sourceType":"script"}