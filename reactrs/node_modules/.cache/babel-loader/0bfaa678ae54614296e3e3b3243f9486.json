{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar callId = require('./id');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\n\n\nmodule.exports = function (options) {\n  var id = callId(options);\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n\n  function isOnline() {\n    return _isOnline.apply(this, arguments);\n  }\n\n  function _isOnline() {\n    _isOnline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return id(options);\n\n            case 3:\n              res = _context.sent;\n              return _context.abrupt(\"return\", Boolean(res && res.addresses && res.addresses.length));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _isOnline.apply(this, arguments);\n  }\n\n  return isOnline;\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/is-online.js"],"names":["callId","require","module","exports","options","id","isOnline","res","Boolean","addresses","length"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,OAAO,EAAI;AAC1B,MAAMC,EAAE,GAAGL,MAAM,CAACI,OAAD,CAAjB;AAEA;AACF;AACA;;AAL4B,WAMXE,QANW;AAAA;AAAA;;AAAA;AAAA,yEAM1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBF,cAAAA,OAAzB,2DAAmC,EAAnC;AAAA;AAAA,qBACoBC,EAAE,CAACD,OAAD,CADtB;;AAAA;AACQG,cAAAA,GADR;AAAA,+CAGSC,OAAO,CAACD,GAAG,IAAIA,GAAG,CAACE,SAAX,IAAwBF,GAAG,CAACE,SAAJ,CAAcC,MAAvC,CAHhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAN0B;AAAA;AAAA;;AAW1B,SAAOJ,QAAP;AACD,CAZD","sourcesContent":["'use strict'\n\nconst callId = require('./id')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = options => {\n  const id = callId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"]},"metadata":{},"sourceType":"script"}