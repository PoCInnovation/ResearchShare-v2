{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\n\n\nmodule.exports = function (codecs, options) {\n  var fn = configure(function (api) {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    var put = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode) {\n        var options,\n            settings,\n            codec,\n            serialized,\n            controller,\n            signal,\n            res,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                settings = _objectSpread({\n                  format: 'dag-cbor',\n                  hashAlg: 'sha2-256',\n                  inputEnc: 'raw'\n                }, options);\n                _context.next = 4;\n                return codecs.getCodec(settings.format);\n\n              case 4:\n                codec = _context.sent;\n                serialized = codec.encode(dagNode); // allow aborting requests on body errors\n\n                controller = new AbortController();\n                signal = abortSignal(controller.signal, settings.signal);\n                _context.t0 = api;\n                _context.t1 = _objectSpread;\n                _context.t2 = {\n                  timeout: settings.timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams(settings)\n                };\n                _context.next = 13;\n                return multipartRequest(serialized, controller, settings.headers);\n\n              case 13:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n                _context.next = 17;\n                return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n              case 17:\n                res = _context.sent;\n                _context.next = 20;\n                return res.json();\n\n              case 20:\n                data = _context.sent;\n                return _context.abrupt(\"return\", CID.parse(data.Cid['/']));\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function put(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dag/put.js"],"names":["require","CID","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","codecs","options","fn","api","put","dagNode","settings","format","hashAlg","inputEnc","getCodec","codec","serialized","encode","controller","signal","timeout","searchParams","headers","post","res","json","data","parse","Cid"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;gBAC4BA,OAAO,CAAC,yBAAD,C;IAA3BM,e,aAAAA,e;AAER;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAACC,MAAD,EAASC,OAAT,EAAqB;AACpC,MAAMC,EAAE,GAAGT,SAAS,CAAC,UAACU,GAAD,EAAS;AAC5B;AACJ;AACA;AACI,QAAMC,GAAG;AAAA,0EAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBJ,gBAAAA,OAAhB,2DAA0B,EAA1B;AACJK,gBAAAA,QADI;AAERC,kBAAAA,MAAM,EAAE,UAFA;AAGRC,kBAAAA,OAAO,EAAE,UAHD;AAIRC,kBAAAA,QAAQ,EAAE;AAJF,mBAKLR,OALK;AAAA;AAAA,uBAQUD,MAAM,CAACU,QAAP,CAAgBJ,QAAQ,CAACC,MAAzB,CARV;;AAAA;AAQJI,gBAAAA,KARI;AASJC,gBAAAA,UATI,GASSD,KAAK,CAACE,MAAN,CAAaR,OAAb,CATT,EAWV;;AACMS,gBAAAA,UAZI,GAYS,IAAIjB,eAAJ,EAZT;AAaJkB,gBAAAA,MAbI,GAaKnB,WAAW,CAACkB,UAAU,CAACC,MAAZ,EAAoBT,QAAQ,CAACS,MAA7B,CAbhB;AAAA,8BAeQZ,GAfR;AAAA;AAAA;AAgBRa,kBAAAA,OAAO,EAAEV,QAAQ,CAACU,OAhBV;AAiBRD,kBAAAA,MAAM,EAANA,MAjBQ;AAkBRE,kBAAAA,YAAY,EAAEtB,iBAAiB,CAACW,QAAD;AAlBvB;AAAA;AAAA,uBAoBAZ,gBAAgB,CAACkB,UAAD,EAAaE,UAAb,EAAyBR,QAAQ,CAACY,OAAlC,CApBhB;;AAAA;AAAA;AAAA;AAAA;AAAA,mCAeYC,IAfZ,mBAeiB,SAfjB;;AAAA;AAeJC,gBAAAA,GAfI;AAAA;AAAA,uBAuBSA,GAAG,CAACC,IAAJ,EAvBT;;AAAA;AAuBJC,gBAAAA,IAvBI;AAAA,iDAyBH9B,GAAG,CAAC+B,KAAJ,CAAUD,IAAI,CAACE,GAAL,CAAS,GAAT,CAAV,CAzBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAHpB,GAAG;AAAA;AAAA;AAAA,OAAT;;AA4BA,WAAOA,GAAP;AACD,GAjCmB,CAApB;AAmCA,SAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CArCD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      }\n\n      const codec = await codecs.getCodec(settings.format)\n      const serialized = codec.encode(dagNode)\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest(serialized, controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n"]},"metadata":{},"sourceType":"script"}