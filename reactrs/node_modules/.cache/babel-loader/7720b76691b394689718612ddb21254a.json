{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (path && !(path instanceof CID) && typeof path !== 'string') {\n                options = path || {};\n                path = '/';\n              }\n\n              options = options || {};\n              _context.next = 5;\n              return api.post('files/stat', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path\n                }, options)),\n                headers: options.headers\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              data = _context.sent;\n              data.WithLocality = data.WithLocality || false;\n              return _context.abrupt(\"return\", toCoreInterface(toCamelWithMetadata(data)));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  entry.cid = CID.parse(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/files/stat.js"],"names":["require","CID","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","stat","path","options","post","timeout","signal","searchParams","arg","headers","res","json","data","WithLocality","toCoreInterface","entry","cid","parse","hash"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,mBAAmB,GAAGF,OAAO,CAAC,sCAAD,CAAnC;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,IAJiB;AAAA;AAAA;;AAAA;AAAA,qEAIhC,iBAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2BC,cAAAA,OAA3B,2DAAqC,EAArC;;AACE,kBAAID,IAAI,IAAI,EAAEA,IAAI,YAAYR,GAAlB,CAAR,IAAkC,OAAOQ,IAAP,KAAgB,QAAtD,EAAgE;AAC9DC,gBAAAA,OAAO,GAAGD,IAAI,IAAI,EAAlB;AACAA,gBAAAA,IAAI,GAAG,GAAP;AACD;;AAEDC,cAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AANF;AAAA,qBAQoBH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADsB;AAEvCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFuB;AAGvCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,EAAEN;AADwB,mBAE1BC,OAF0B,EAHQ;AAOvCM,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AAPsB,eAAvB,CARpB;;AAAA;AAQQC,cAAAA,GARR;AAAA;AAAA,qBAiBqBA,GAAG,CAACC,IAAJ,EAjBrB;;AAAA;AAiBQC,cAAAA,IAjBR;AAmBEA,cAAAA,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACC,YAAL,IAAqB,KAAzC;AAnBF,+CAoBSC,eAAe,CAACnB,mBAAmB,CAACiB,IAAD,CAApB,CApBxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA0BhC,SAAOX,IAAP;AACD,CA3ByB,CAA1B;AA6BA;AACA;AACA;;AACA,SAASa,eAAT,CAA0BC,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACC,GAAN,GAAYtB,GAAG,CAACuB,KAAJ,CAAUF,KAAK,CAACG,IAAhB,CAAZ;AACA,SAAOH,KAAK,CAACG,IAAb;AACA,SAAOH,KAAP;AACD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    if (path && !(path instanceof CID) && typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    options = options || {}\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}