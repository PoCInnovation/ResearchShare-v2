{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\n\nmodule.exports = configure(function (api, opts) {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  var refs = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args) {\n      var options,\n          argsArr,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n              argsArr = Array.isArray(args) ? args : [args];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('refs', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: argsArr.map(function (arg) {\n                    return \"\".concat(arg instanceof Uint8Array ? CID.decode(arg) : arg);\n                  })\n                }, options)),\n                headers: options.headers,\n                transform: toCamel\n              }));\n\n            case 4:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 6);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function refs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  });\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/refs/index.js"],"names":["require","CID","toCamel","configure","toUrlSearchParams","module","exports","api","opts","refs","args","options","argsArr","Array","isArray","post","timeout","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","res","ndjson","Object","assign","local"],"mappings":"AAAA;;;;;;;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAACI,GAAD,EAAMC,IAAN,EAAe;AACxC;AACF;AACA;AACE,MAAMC,IAAI;AAAA,0EAAG,iBAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwBC,cAAAA,OAAxB,2DAAkC,EAAlC;;AACX;AACMC,cAAAA,OAFK,GAEKC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAFlC;AAAA;AAAA,0CAIOH,GAAG,CAACQ,IAAJ,CAAS,MAAT,EAAiB;AACjCC,gBAAAA,OAAO,EAAEL,OAAO,CAACK,OADgB;AAEjCC,gBAAAA,MAAM,EAAEN,OAAO,CAACM,MAFiB;AAGjCC,gBAAAA,YAAY,EAAEd,iBAAiB;AAC7Be,kBAAAA,GAAG,EAAEP,OAAO,CAACQ,GAAR,CAAY,UAAAD,GAAG;AAAA,qCAAOA,GAAG,YAAYE,UAAf,GAA4BpB,GAAG,CAACqB,MAAJ,CAAWH,GAAX,CAA5B,GAA8CA,GAArD;AAAA,mBAAf;AADwB,mBAE1BR,OAF0B,EAHE;AAOjCY,gBAAAA,OAAO,EAAEZ,OAAO,CAACY,OAPgB;AAQjCC,gBAAAA,SAAS,EAAEtB;AARsB,eAAjB,CAJP;;AAAA;AAILuB,cAAAA,GAJK;AAeX,mFAAQA,GAAG,CAACC,MAAJ,EAAR;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJjB,IAAI;AAAA;AAAA;AAAA,KAAV;;AAkBA,SAAOkB,MAAM,CAACC,MAAP,CAAcnB,IAAd,EAAoB;AACzBoB,IAAAA,KAAK,EAAE7B,OAAO,CAAC,SAAD,CAAP,CAAmBQ,IAAnB;AADkB,GAApB,CAAP;AAGD,CAzByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  })\n})\n"]},"metadata":{},"sourceType":"script"}