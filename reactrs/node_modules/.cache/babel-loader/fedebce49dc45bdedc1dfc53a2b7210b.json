{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode,\n    DAGLink = _require.DAGLink;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('object/get', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid instanceof Uint8Array ? new CID(cid) : cid),\n                  dataEncoding: 'base64'\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", new DAGNode(uint8ArrayFromString(data.Data, 'base64pad'), (data.Links || []).map(function (l) {\n                return new DAGLink(l.Name, l.Size, l.Hash);\n              })));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/object/get.js"],"names":["CID","require","DAGNode","DAGLink","configure","toUrlSearchParams","uint8ArrayFromString","module","exports","api","cid","options","post","timeout","signal","searchParams","arg","Uint8Array","dataEncoding","headers","res","json","data","Data","Links","map","l","Name","Size","Hash"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;eAC6BA,OAAO,CAAC,aAAD,C;IAA5BC,O,YAAAA,O;IAASC,O,YAAAA,O;;AACjB,IAAMC,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMK,oBAAoB,GAAGL,OAAO,CAAC,yBAAD,CAApC;;AAEAM,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AAAA,wEAAO,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,OAAZ,2DAAsB,EAAtB;AAAA;AAAA,qBACaF,GAAG,CAACG,IAAJ,CAAS,YAAT,EAAuB;AACvCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADsB;AAEvCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFuB;AAGvCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,YAAKN,GAAG,YAAYO,UAAf,GAA4B,IAAIjB,GAAJ,CAAQU,GAAR,CAA5B,GAA2CA,GAAhD,CAD0B;AAE7BQ,kBAAAA,YAAY,EAAE;AAFe,mBAG1BP,OAH0B,EAHQ;AAQvCQ,gBAAAA,OAAO,EAAER,OAAO,CAACQ;AARsB,eAAvB,CADb;;AAAA;AACCC,cAAAA,GADD;AAAA;AAAA,qBAWcA,GAAG,CAACC,IAAJ,EAXd;;AAAA;AAWCC,cAAAA,IAXD;AAAA,+CAaE,IAAIpB,OAAJ,CACLI,oBAAoB,CAACgB,IAAI,CAACC,IAAN,EAAY,WAAZ,CADf,EAEL,CAACD,IAAI,CAACE,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB,UAAAC,CAAC;AAAA,uBAAI,IAAIvB,OAAJ,CAAYuB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAAJ;AAAA,eAAxB,CAFK,CAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkBD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  return async (cid, options = {}) => {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return new DAGNode(\n      uint8ArrayFromString(data.Data, 'base64pad'),\n      (data.Links || []).map(l => new DAGLink(l.Name, l.Size, l.Hash))\n    )\n  }\n})\n"]},"metadata":{},"sourceType":"script"}