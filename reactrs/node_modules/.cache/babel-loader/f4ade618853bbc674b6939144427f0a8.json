{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          data,\n          output,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('id', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: options.peerId ? options.peerId.toString() : undefined\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              output = _objectSpread({}, toCamel(data));\n\n              if (output.addresses) {\n                output.addresses = output.addresses.map(function (\n                /** @type {string} */\n                ma) {\n                  return new Multiaddr(ma);\n                });\n              } // @ts-ignore server output is not typed\n\n\n              return _context.abrupt(\"return\", output);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/id.js"],"names":["toCamel","require","Multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","post","timeout","signal","searchParams","arg","peerId","toString","undefined","headers","res","json","data","output","addresses","map","ma"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;eACsBA,OAAO,CAAC,WAAD,C;IAArBC,S,YAAAA,S;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBC,cAAAA,OAAnB,2DAA6B,EAA7B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,IAAT,EAAe;AAC/BC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADc;AAE/BC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFe;AAG/BC,gBAAAA,YAAY,EAAET,iBAAiB;AAC7BU,kBAAAA,GAAG,EAAEL,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACM,MAAR,CAAeC,QAAf,EAAjB,GAA6CC;AADrB,mBAE1BR,OAF0B,EAHA;AAO/BS,gBAAAA,OAAO,EAAET,OAAO,CAACS;AAPc,eAAf,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAUqBA,GAAG,CAACC,IAAJ,EAVrB;;AAAA;AAUQC,cAAAA,IAVR;AAYQC,cAAAA,MAZR,qBAaOtB,OAAO,CAACqB,IAAD,CAbd;;AAgBE,kBAAIC,MAAM,CAACC,SAAX,EAAsB;AACpBD,gBAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB;AAAC;AAAsBC,gBAAAA,EAAvB;AAAA,yBAA8B,IAAIvB,SAAJ,CAAcuB,EAAd,CAA9B;AAAA,iBAArB,CAAnB;AACD,eAlBH,CAoBE;;;AApBF,+CAqBSH,MArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA2BhC,SAAOd,EAAP;AACD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...toCamel(data)\n    }\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-ignore server output is not typed\n    return output\n  }\n  return id\n})\n"]},"metadata":{},"sourceType":"script"}