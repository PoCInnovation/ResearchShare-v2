{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  function importKey(_x, _x2, _x3) {\n    return _importKey.apply(this, arguments);\n  }\n\n  function _importKey() {\n    _importKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, pem, password) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n              _context.next = 3;\n              return api.post('key/import', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: name,\n                  pem: pem,\n                  password: password\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", toCamel(data));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _importKey.apply(this, arguments);\n  }\n\n  return importKey;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/key/import.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","importKey","name","pem","password","options","post","timeout","signal","searchParams","arg","headers","res","json","data"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,SAJiB;AAAA;AAAA;;AAAA;AAAA,0EAIhC,iBAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+CC,cAAAA,OAA/C,2DAAyD,EAAzD;AAAA;AAAA,qBACoBL,GAAG,CAACM,IAAJ,CAAS,YAAT,EAAuB;AACvCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADsB;AAEvCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFuB;AAGvCC,gBAAAA,YAAY,EAAEZ,iBAAiB;AAC7Ba,kBAAAA,GAAG,EAAER,IADwB;AAE7BC,kBAAAA,GAAG,EAAHA,GAF6B;AAG7BC,kBAAAA,QAAQ,EAARA;AAH6B,mBAI1BC,OAJ0B,EAHQ;AASvCM,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AATsB,eAAvB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAYqBA,GAAG,CAACC,IAAJ,EAZrB;;AAAA;AAYQC,cAAAA,IAZR;AAAA,+CAeSpB,OAAO,CAACoB,IAAD,CAfhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAqBhC,SAAOb,SAAP;AACD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-ignore server output is not typed\n    return toCamel(data)\n  }\n  return importKey\n})\n"]},"metadata":{},"sourceType":"script"}