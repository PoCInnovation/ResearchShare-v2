{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _digest = require('./digest.js');\n\nvar from = function from(_ref) {\n  var name = _ref.name,\n      code = _ref.code,\n      encode = _ref.encode;\n  return new Hasher(name, code, encode);\n};\n\nvar Hasher = /*#__PURE__*/function () {\n  function Hasher(name, code, encode) {\n    _classCallCheck(this, Hasher);\n\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  _createClass(Hasher, [{\n    key: \"digest\",\n    value: function () {\n      var _digest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n        var digest$1;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(input instanceof Uint8Array)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.encode(input);\n\n              case 3:\n                digest$1 = _context.sent;\n                return _context.abrupt(\"return\", _digest.create(this.code, digest$1));\n\n              case 7:\n                throw Error('Unknown type, must be binary type');\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function digest(_x) {\n        return _digest2.apply(this, arguments);\n      }\n\n      return digest;\n    }()\n  }]);\n\n  return Hasher;\n}();\n\nexports.Hasher = Hasher;\nexports.from = from;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/multiformats/cjs/src/hashes/hasher.js"],"names":["Object","defineProperty","exports","value","digest","require","from","name","code","encode","Hasher","input","Uint8Array","digest$1","create","Error"],"mappings":"AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,OAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,MAAQC,IAAR,QAAQA,IAAR;AAAA,MAAcC,MAAd,QAAcA,MAAd;AAAA,SAA0B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAA1B;AAAA,CAAb;;IACMC,M;AACJ,kBAAYH,IAAZ,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAAA;;AAC9B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;;8EACD,iBAAaE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACMA,KAAK,YAAYC,UADvB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAE2B,KAAKH,MAAL,CAAYE,KAAZ,CAF3B;;AAAA;AAEUE,gBAAAA,QAFV;AAAA,iDAGWT,OAAM,CAACU,MAAP,CAAc,KAAKN,IAAnB,EAAyBK,QAAzB,CAHX;;AAAA;AAAA,sBAKUE,KAAK,CAAC,mCAAD,CALf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAUFb,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;AACAR,OAAO,CAACI,IAAR,GAAeA,IAAf","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  async digest(input) {\n    if (input instanceof Uint8Array) {\n      const digest$1 = await this.encode(input);\n      return digest.create(this.code, digest$1);\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n"]},"metadata":{},"sourceType":"script"}