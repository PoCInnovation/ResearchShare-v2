{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  function cp(_x, _x2) {\n    return _cp.apply(this, arguments);\n  }\n\n  function _cp() {\n    _cp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sources, destination) {\n      var options,\n          sourceArr,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n              /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n              sourceArr = Array.isArray(sources) ? sources : [sources];\n              _context.next = 4;\n              return api.post('files/cp', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: sourceArr.concat(destination).map(function (src) {\n                    return src instanceof CID ? \"/ipfs/\".concat(src) : src;\n                  })\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _cp.apply(this, arguments);\n  }\n\n  return cp;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/files/cp.js"],"names":["require","CID","configure","toUrlSearchParams","module","exports","api","cp","sources","destination","options","sourceArr","Array","isArray","post","timeout","signal","searchParams","arg","concat","map","src","headers","res","text"],"mappings":"AAAA;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIjBC,EAJiB;AAAA;AAAA;;AAAA;AAAA,mEAIhC,iBAAmBC,OAAnB,EAA4BC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyCC,cAAAA,OAAzC,2DAAmD,EAAnD;;AACE;AACMC,cAAAA,SAFR,GAEoBC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAFvD;AAAA;AAAA,qBAIoBF,GAAG,CAACQ,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,OAAO,EAAEL,OAAO,CAACK,OADoB;AAErCC,gBAAAA,MAAM,EAAEN,OAAO,CAACM,MAFqB;AAGrCC,gBAAAA,YAAY,EAAEd,iBAAiB;AAC7Be,kBAAAA,GAAG,EAAEP,SAAS,CAACQ,MAAV,CAAiBV,WAAjB,EAA8BW,GAA9B,CAAkC,UAAAC,GAAG;AAAA,2BAAIA,GAAG,YAAYpB,GAAf,mBAA8BoB,GAA9B,IAAsCA,GAA1C;AAAA,mBAArC;AADwB,mBAE1BX,OAF0B,EAHM;AAOrCY,gBAAAA,OAAO,EAAEZ,OAAO,CAACY;AAPoB,eAArB,CAJpB;;AAAA;AAIQC,cAAAA,GAJR;AAAA;AAAA,qBAcQA,GAAG,CAACC,IAAJ,EAdR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOjB,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => src instanceof CID ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n"]},"metadata":{},"sourceType":"script"}