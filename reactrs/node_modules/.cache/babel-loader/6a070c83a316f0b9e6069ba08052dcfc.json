{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar addAll = require('./add-all');\n\nvar last = require('it-last');\n\nvar configure = require('../lib/configure');\n\nmodule.exports = function (options) {\n  var all = addAll(options);\n  return configure(function () {\n    return /*#__PURE__*/function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n        var options,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                return _context.abrupt(\"return\", last(all(_objectSpread({\n                  path: path\n                }, options), options)));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }();\n  })(options);\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipfs-http-client/src/pin/add.js"],"names":["addAll","require","last","configure","module","exports","options","all","path","add"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,OAAD,EAAa;AAC5B,MAAMC,GAAG,GAAGP,MAAM,CAACM,OAAD,CAAlB;AAEA,SAAOH,SAAS,CAAC,YAAM;AACrB;AAAA,0EAAO,iBAAoBK,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BF,gBAAAA,OAA1B,2DAAoC,EAApC;AAAA,iDACEJ,IAAI,CAACK,GAAG;AACbC,kBAAAA,IAAI,EAAJA;AADa,mBAEVF,OAFU,GAGZA,OAHY,CAAJ,CADN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA,eAAsBG,GAAtB;AAAA;AAAA;;AAAA,aAAsBA,GAAtB;AAAA;AAMD,GAPe,CAAT,CAOJH,OAPI,CAAP;AAQD,CAXD","sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('../lib/configure')\n\nmodule.exports = (options) => {\n  const all = addAll(options)\n\n  return configure(() => {\n    return async function add (path, options = {}) { // eslint-disable-line require-await\n      return last(all({\n        path,\n        ...options\n      }, options))\n    }\n  })(options)\n}\n"]},"metadata":{},"sourceType":"script"}