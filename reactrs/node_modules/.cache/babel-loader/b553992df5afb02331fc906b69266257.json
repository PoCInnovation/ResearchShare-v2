{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  var set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value) {\n      var options,\n          params,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n              if (!(typeof key !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Invalid key type');\n\n            case 3:\n              params = _objectSpread(_objectSpread({}, options), encodeParam(key, value));\n              _context.next = 6;\n              return api.post('config', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(params),\n                headers: options.headers\n              });\n\n            case 6:\n              res = _context.sent;\n              _context.next = 9;\n              return res.text();\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return set;\n});\n/**\n * @param {*} key\n * @param {*} value\n */\n\nvar encodeParam = function encodeParam(key, value) {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/config/set.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","post","timeout","signal","searchParams","headers","res","text","arg","toString","bool","JSON","stringify","json"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAChC;AACF;AACA;AACE,MAAMC,GAAG;AAAA,wEAAG,iBAAOC,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBC,cAAAA,OAAnB,2DAA6B,EAA7B;;AAAA,oBACN,OAAOF,GAAP,KAAe,QADT;AAAA;AAAA;AAAA;;AAAA,oBAEF,IAAIG,KAAJ,CAAU,kBAAV,CAFE;;AAAA;AAKJC,cAAAA,MALI,mCAMLF,OANK,GAOLG,WAAW,CAACL,GAAD,EAAMC,KAAN,CAPN;AAAA;AAAA,qBAUQH,GAAG,CAACQ,IAAJ,CAAS,QAAT,EAAmB;AACnCC,gBAAAA,OAAO,EAAEL,OAAO,CAACK,OADkB;AAEnCC,gBAAAA,MAAM,EAAEN,OAAO,CAACM,MAFmB;AAGnCC,gBAAAA,YAAY,EAAEd,iBAAiB,CAACS,MAAD,CAHI;AAInCM,gBAAAA,OAAO,EAAER,OAAO,CAACQ;AAJkB,eAAnB,CAVR;;AAAA;AAUJC,cAAAA,GAVI;AAAA;AAAA,qBAiBJA,GAAG,CAACC,IAAJ,EAjBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHb,GAAG;AAAA;AAAA;AAAA,KAAT;;AAoBA,SAAOA,GAAP;AACD,CAzByB,CAA1B;AA2BA;AACA;AACA;AACA;;AACA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACL,GAAD,EAAMC,KAAN,EAAgB;AAClC,UAAQ,OAAOA,KAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAK,CAACa,QAAN,EAAN,CAAP;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAEF,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAN;AAAP,OAAP;;AACF;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMgB,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAN,CAAP;AAAqCiB,QAAAA,IAAI,EAAE;AAA3C,OAAP;AANJ;AAQD,CATD","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}