{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nvar _require2 = require('multiformats/cid'),\n    CID = _require2.CID;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _yield$_awaitAsyncGen,\n          headers,\n          body,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          _value2,\n          Root,\n          Cid,\n          PinErrorMsg,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              _context.next = 10;\n              return _awaitAsyncGenerator(api.post('dag/import', {\n                timeout: options.timeout,\n                signal: signal,\n                headers: headers,\n                body: body,\n                searchParams: toUrlSearchParams({\n                  'pin-roots': options.pinRoots\n                })\n              }));\n\n            case 10:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 13;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 15:\n              _context.next = 17;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 17:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 21;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 21:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 31;\n                break;\n              }\n\n              _value2 = _value, Root = _value2.Root;\n\n              if (!(Root !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n\n              Cid = Root.Cid['/'], PinErrorMsg = Root.PinErrorMsg;\n              _context.next = 28;\n              return {\n                root: {\n                  cid: CID.parse(Cid),\n                  pinErrorMsg: PinErrorMsg\n                }\n              };\n\n            case 28:\n              _iteratorNormalCompletion = true;\n              _context.next = 15;\n              break;\n\n            case 31:\n              _context.next = 37;\n              break;\n\n            case 33:\n              _context.prev = 33;\n              _context.t0 = _context[\"catch\"](13);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 37:\n              _context.prev = 37;\n              _context.prev = 38;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 42;\n                break;\n              }\n\n              _context.next = 42;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 42:\n              _context.prev = 42;\n\n              if (!_didIteratorError) {\n                _context.next = 45;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 45:\n              return _context.finish(42);\n\n            case 46:\n              return _context.finish(37);\n\n            case 47:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 33, 37, 47], [38,, 42, 46]]);\n    }));\n    return _dagImport.apply(this, arguments);\n  }\n\n  return dagImport;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/dag/import.js"],"names":["configure","require","toUrlSearchParams","abortSignal","multipartRequest","AbortController","CID","module","exports","api","dagImport","source","options","controller","signal","headers","body","post","timeout","searchParams","pinRoots","res","ndjson","Root","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;eAC4BA,OAAO,CAAC,yBAAD,C;IAA3BI,e,YAAAA,e;;gBACQJ,OAAO,CAAC,kBAAD,C;IAAfK,G,aAAAA,G;AAER;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAAC,UAAAS,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,SAJe;AAAA;AAAA;;AAAA;AAAA,4EAIhC,iBAA4BC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoCC,cAAAA,OAApC,2DAA8C,EAA9C;AACQC,cAAAA,UADR,GACqB,IAAIR,eAAJ,EADrB;AAEQS,cAAAA,MAFR,GAEiBX,WAAW,CAACU,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAF5B;AAAA;AAAA,0CAGkCV,gBAAgB,CAACO,MAAD,EAASE,UAAT,EAAqBD,OAAO,CAACG,OAA7B,CAHlD;;AAAA;AAAA;AAGUA,cAAAA,OAHV,yBAGUA,OAHV;AAGmBC,cAAAA,IAHnB,yBAGmBA,IAHnB;AAAA;AAAA,0CAKoBP,GAAG,CAACQ,IAAJ,CAAS,YAAT,EAAuB;AACvCC,gBAAAA,OAAO,EAAEN,OAAO,CAACM,OADsB;AAEvCJ,gBAAAA,MAAM,EAANA,MAFuC;AAGvCC,gBAAAA,OAAO,EAAPA,OAHuC;AAIvCC,gBAAAA,IAAI,EAAJA,IAJuC;AAKvCG,gBAAAA,YAAY,EAAEjB,iBAAiB,CAAC;AAAE,+BAAaU,OAAO,CAACQ;AAAvB,iBAAD;AALQ,eAAvB,CALpB;;AAAA;AAKQC,cAAAA,GALR;AAAA;AAAA;AAAA;AAAA,yCAa+BA,GAAG,CAACC,MAAJ,EAb/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,gCAaqBC,IAbrB,WAaqBA,IAbrB;;AAAA,oBAcQA,IAAI,KAAKC,SAdjB;AAAA;AAAA;AAAA;;AAe0BC,cAAAA,GAf1B,GAeiDF,IAfjD,CAecE,GAfd,CAeqB,GAfrB,GAeiCC,WAfjC,GAeiDH,IAfjD,CAeiCG,WAfjC;AAAA;AAiBM,qBAAM;AACJC,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,GAAG,EAAEtB,GAAG,CAACuB,KAAJ,CAAUJ,GAAV,CADD;AAEJK,kBAAAA,WAAW,EAAEJ;AAFT;AADF,eAAN;;AAjBN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AA+BhC,SAAOhB,SAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst multipartRequest = require('../lib/multipart-request')\nconst { AbortController } = require('native-abort-controller')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      timeout: options.timeout,\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"]},"metadata":{},"sourceType":"script"}