{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  function gc() {\n    return _gc.apply(this, arguments);\n  }\n\n  function _gc() {\n    _gc = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('repo/gc', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers,\n                transform: function transform(res) {\n                  return {\n                    err: res.Error ? new Error(res.Error) : null,\n                    cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n                  };\n                }\n              }));\n\n            case 3:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 5);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _gc.apply(this, arguments);\n  }\n\n  return gc;\n});","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/ipfs-http-client/src/repo/gc.js"],"names":["require","CID","configure","toUrlSearchParams","module","exports","api","gc","options","post","timeout","signal","searchParams","headers","transform","res","err","Error","cid","Key","parse","ndjson"],"mappings":"AAAA;;;;;;;;;;;;eAEgBA,OAAO,CAAC,kBAAD,C;IAAfC,G,YAAAA,G;;AACR,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,EAJe;AAAA;AAAA;;AAAA;AAAA,qEAIhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqBC,cAAAA,OAArB,2DAA+B,EAA/B;AAAA;AAAA,0CACoBF,GAAG,CAACG,IAAJ,CAAS,SAAT,EAAoB;AACpCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADmB;AAEpCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFoB;AAGpCC,gBAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAHK;AAIpCK,gBAAAA,OAAO,EAAEL,OAAO,CAACK,OAJmB;AAKpCC,gBAAAA,SAAS,EAAE,mBAACC,GAAD,EAAS;AAClB,yBAAO;AACLC,oBAAAA,GAAG,EAAED,GAAG,CAACE,KAAJ,GAAY,IAAIA,KAAJ,CAAUF,GAAG,CAACE,KAAd,CAAZ,GAAmC,IADnC;AAELC,oBAAAA,GAAG,EAAE,CAACH,GAAG,CAACI,GAAJ,IAAW,EAAZ,EAAgB,GAAhB,IAAuBlB,GAAG,CAACmB,KAAJ,CAAUL,GAAG,CAACI,GAAJ,CAAQ,GAAR,CAAV,CAAvB,GAAiD;AAFjD,mBAAP;AAID;AAVmC,eAApB,CADpB;;AAAA;AACQJ,cAAAA,GADR;AAcE,mFAAQA,GAAG,CAACM,MAAJ,EAAR;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAoBhC,SAAOd,EAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n"]},"metadata":{},"sourceType":"script"}