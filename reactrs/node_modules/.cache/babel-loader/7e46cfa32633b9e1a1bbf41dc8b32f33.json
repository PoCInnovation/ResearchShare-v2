{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/thalusa/Documents/ResearchShare-v2/reactrs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CID = require('cids');\n\nvar _require = require('../package.json'),\n    version = _require.version;\n\nvar blockSymbol = Symbol.for('@ipld/js-ipld-block/block');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\n\nvar Block = /*#__PURE__*/function () {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  function Block(data, cid) {\n    _classCallCheck(this, Block);\n\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this.data = data;\n    this.cid = cid;\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    });\n  }\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n\n\n  _createClass(Block, [{\n    key: \"_data\",\n    get: function get() {\n      deprecateData();\n      return this.data;\n    }\n    /**\n     * The cid of the data this block represents.\n     *\n     * @deprecated\n     * @type {CID}\n     */\n\n  }, {\n    key: \"_cid\",\n    get: function get() {\n      deprecateCID();\n      return this.cid;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'Block';\n    }\n  }, {\n    key: blockSymbol,\n    get: function get() {\n      return true;\n    }\n    /**\n     * Check if the given value is a Block.\n     *\n     * @param {any} other\n     * @returns {other is Block}\n     */\n\n  }], [{\n    key: \"isBlock\",\n    value: function isBlock(other) {\n      return Boolean(other && other[blockSymbol]);\n    }\n  }]);\n\n  return Block;\n}();\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\n\n\nvar deprecate = function deprecate(range, message) {\n  var warned = false;\n  return function () {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true; // eslint-disable-next-line no-console\n\n        console.warn(message);\n      }\n    } else {\n      throw new Error(message);\n    }\n  };\n};\n\nvar deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead');\nvar deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead');\nmodule.exports = Block;","map":{"version":3,"sources":["/home/thalusa/Documents/ResearchShare-v2/node_modules/ipld-block/src/index.js"],"names":["CID","require","version","blockSymbol","Symbol","for","readonly","writable","configurable","enumerable","Block","data","cid","Uint8Array","Error","isCID","Object","defineProperties","deprecateData","deprecateCID","toStringTag","other","Boolean","deprecate","range","message","warned","test","console","warn","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;eAEoBA,OAAO,CAAC,iBAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,WAAW,GAAGC,MAAM,CAACC,GAAP,CAAW,2BAAX,CAApB;AACA,IAAMC,QAAQ,GAAG;AAAEC,EAAAA,QAAQ,EAAE,KAAZ;AAAmBC,EAAAA,YAAY,EAAE,KAAjC;AAAwCC,EAAAA,UAAU,EAAE;AAApD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;IACMC,K;AACJ;AACF;AACA;AACA;AACE,iBAAaC,IAAb,EAAmBC,GAAnB,EAAwB;AAAA;;AACtB,QAAI,CAACD,IAAD,IAAS,EAAEA,IAAI,YAAYE,UAAlB,CAAb,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAI,CAACF,GAAD,IAAQ,CAACZ,GAAG,CAACe,KAAJ,CAAUH,GAAV,CAAb,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AAEAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BN,MAAAA,IAAI,EAAEL,QADsB;AAE5BM,MAAAA,GAAG,EAAEN;AAFuB,KAA9B;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;;;SACE,eAAa;AACXY,MAAAA,aAAa;AACb,aAAO,KAAKP,IAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;SACE,eAAY;AACVQ,MAAAA,YAAY;AACZ,aAAO,KAAKP,GAAZ;AACD;;SAEIR,MAAM,CAACgB,W;SAAZ,eAA4B;AAC1B,aAAO,OAAP;AACD;;SAEIjB,W;SAAL,eAAqB;AACnB,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,iBAAgBkB,KAAhB,EAAuB;AACrB,aAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAAClB,WAAD,CAAf,CAAd;AACD;;;;;AAGH;AACA;AACA;AACA;AACA;;;AACA,IAAMoB,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACpC,MAAIC,MAAM,GAAG,KAAb;AACA,SAAO,YAAM;AACX,QAAIF,KAAK,CAACG,IAAN,CAAWzB,OAAX,CAAJ,EAAyB;AACvB,UAAI,CAACwB,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAG,IAAT,CADW,CAEX;;AACAE,QAAAA,OAAO,CAACC,IAAR,CAAaJ,OAAb;AACD;AACF,KAND,MAMO;AACL,YAAM,IAAIX,KAAJ,CAAUW,OAAV,CAAN;AACD;AACF,GAVD;AAWD,CAbD;;AAeA,IAAMN,YAAY,GAAGI,SAAS,CAAC,eAAD,EAAkB,4FAAlB,CAA9B;AACA,IAAML,aAAa,GAAGK,SAAS,CAAC,cAAD,EAAiB,8FAAjB,CAA/B;AAEAO,MAAM,CAACC,OAAP,GAAiBrB,KAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\n\nconst { version } = require('../package.json')\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block')\nconst readonly = { writable: false, configurable: false, enumerable: true }\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\nclass Block {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor (data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array')\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID')\n    }\n\n    this.data = data\n    this.cid = cid\n\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    })\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n  get _data () {\n    deprecateData()\n    return this.data\n  }\n\n  /**\n   * The cid of the data this block represents.\n   *\n   * @deprecated\n   * @type {CID}\n   */\n  get _cid () {\n    deprecateCID()\n    return this.cid\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Block'\n  }\n\n  get [blockSymbol] () {\n    return true\n  }\n\n  /**\n   * Check if the given value is a Block.\n   *\n   * @param {any} other\n   * @returns {other is Block}\n   */\n  static isBlock (other) {\n    return Boolean(other && other[blockSymbol])\n  }\n}\n\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\nconst deprecate = (range, message) => {\n  let warned = false\n  return () => {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true\n        // eslint-disable-next-line no-console\n        console.warn(message)\n      }\n    } else {\n      throw new Error(message)\n    }\n  }\n}\n\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead')\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead')\n\nmodule.exports = Block\n"]},"metadata":{},"sourceType":"script"}